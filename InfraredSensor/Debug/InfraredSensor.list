
InfraredSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002674  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002814  08002814  00012814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002880  08002880  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08002880  08002880  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002880  08002880  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002880  08002880  00012880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002884  08002884  00012884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002888  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000254  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002b0  200002b0  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00008dc3  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001440  00000000  00000000  00028e92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000680  00000000  00000000  0002a2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000004f9  00000000  00000000  0002a958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f905  00000000  00000000  0002ae51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00008f7e  00000000  00000000  0004a756  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bfe77  00000000  00000000  000536d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001f40  00000000  00000000  0011354c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  0011548c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080027fc 	.word	0x080027fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080027fc 	.word	0x080027fc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2iz>:
 800085c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d215      	bcs.n	8000892 <__aeabi_d2iz+0x36>
 8000866:	d511      	bpl.n	800088c <__aeabi_d2iz+0x30>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d912      	bls.n	8000898 <__aeabi_d2iz+0x3c>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000882:	fa23 f002 	lsr.w	r0, r3, r2
 8000886:	bf18      	it	ne
 8000888:	4240      	negne	r0, r0
 800088a:	4770      	bx	lr
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	4770      	bx	lr
 8000892:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000896:	d105      	bne.n	80008a4 <__aeabi_d2iz+0x48>
 8000898:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800089c:	bf08      	it	eq
 800089e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008a2:	4770      	bx	lr
 80008a4:	f04f 0000 	mov.w	r0, #0
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop

080008ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	db0b      	blt.n	80008d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	f003 021f 	and.w	r2, r3, #31
 80008c4:	4907      	ldr	r1, [pc, #28]	; (80008e4 <__NVIC_EnableIRQ+0x38>)
 80008c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ca:	095b      	lsrs	r3, r3, #5
 80008cc:	2001      	movs	r0, #1
 80008ce:	fa00 f202 	lsl.w	r2, r0, r2
 80008d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	e000e100 	.word	0xe000e100

080008e8 <InfraredInit>:

volatile int distance;
char msg[MSG_BUF_SIZE];
volatile uint8_t newDistanceAvailable = 0;
void InfraredInit(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
    // Enable GPIOA and GPIOB clocks
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOBEN;
 80008ec:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <InfraredInit+0x3c>)
 80008ee:	695b      	ldr	r3, [r3, #20]
 80008f0:	4a0c      	ldr	r2, [pc, #48]	; (8000924 <InfraredInit+0x3c>)
 80008f2:	f443 23c0 	orr.w	r3, r3, #393216	; 0x60000
 80008f6:	6153      	str	r3, [r2, #20]

    // Configure the GPIO pins as input
    GPIOA->MODER &= ~(GPIO_MODER_MODER10 | GPIO_MODER_MODER8);
 80008f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000902:	f423 134c 	bic.w	r3, r3, #3342336	; 0x330000
 8000906:	6013      	str	r3, [r2, #0]
    GPIOB->MODER &= ~(GPIO_MODER_MODER3 | GPIO_MODER_MODER4 | GPIO_MODER_MODER10);
 8000908:	4b07      	ldr	r3, [pc, #28]	; (8000928 <InfraredInit+0x40>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a06      	ldr	r2, [pc, #24]	; (8000928 <InfraredInit+0x40>)
 800090e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000912:	f423 7370 	bic.w	r3, r3, #960	; 0x3c0
 8000916:	6013      	str	r3, [r2, #0]
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	40021000 	.word	0x40021000
 8000928:	48000400 	.word	0x48000400

0800092c <pin_init>:
    }

    HAL_Delay(50);
}

static void pin_init(void) {
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN; // Enable GPIOB clock
 8000930:	4b16      	ldr	r3, [pc, #88]	; (800098c <pin_init+0x60>)
 8000932:	695b      	ldr	r3, [r3, #20]
 8000934:	4a15      	ldr	r2, [pc, #84]	; (800098c <pin_init+0x60>)
 8000936:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800093a:	6153      	str	r3, [r2, #20]

    GPIOB->MODER |= GPIO_MODER_MODER6_1;  // Set PB6 to alternate function mode
 800093c:	4b14      	ldr	r3, [pc, #80]	; (8000990 <pin_init+0x64>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a13      	ldr	r2, [pc, #76]	; (8000990 <pin_init+0x64>)
 8000942:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000946:	6013      	str	r3, [r2, #0]
    GPIOB->AFR[0] |= (GPIOB->AFR[0] & ~GPIO_AFRL_AFRL6)| (0b0010 << GPIO_AFRL_AFRL6_Pos); // Set PB6 to use TIM4_CH1
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <pin_init+0x64>)
 800094a:	6a1b      	ldr	r3, [r3, #32]
 800094c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000950:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8000954:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <pin_init+0x64>)
 8000956:	6a1b      	ldr	r3, [r3, #32]
 8000958:	490d      	ldr	r1, [pc, #52]	; (8000990 <pin_init+0x64>)
 800095a:	4313      	orrs	r3, r2
 800095c:	620b      	str	r3, [r1, #32]

    // Configure PB5 for alternate function mode (TIM3)
    GPIOB->MODER |= GPIO_MODER_MODER5_1;  //x Set PB5 to alternate function mode
 800095e:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <pin_init+0x64>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a0b      	ldr	r2, [pc, #44]	; (8000990 <pin_init+0x64>)
 8000964:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000968:	6013      	str	r3, [r2, #0]
    GPIOB->AFR[0] |= (GPIOB->AFR[0] & ~GPIO_AFRL_AFRL5)| (0b0010 << GPIO_AFRL_AFRL5_Pos); // Set PB5 to use TIM3_CH2 (AF2)
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <pin_init+0x64>)
 800096c:	6a1b      	ldr	r3, [r3, #32]
 800096e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000972:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <pin_init+0x64>)
 8000978:	6a1b      	ldr	r3, [r3, #32]
 800097a:	4905      	ldr	r1, [pc, #20]	; (8000990 <pin_init+0x64>)
 800097c:	4313      	orrs	r3, r2
 800097e:	620b      	str	r3, [r1, #32]
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	40021000 	.word	0x40021000
 8000990:	48000400 	.word	0x48000400

08000994 <TIM3_Init>:

void TIM3_Init(void) {
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
    // Enable the TIM3 peripheral clock
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000998:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <TIM3_Init+0x54>)
 800099a:	69db      	ldr	r3, [r3, #28]
 800099c:	4a12      	ldr	r2, [pc, #72]	; (80009e8 <TIM3_Init+0x54>)
 800099e:	f043 0302 	orr.w	r3, r3, #2
 80009a2:	61d3      	str	r3, [r2, #28]

    // Configure TIM3 in PWM mode
    TIM3->PSC = 15;       // Prescaler set to 15
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <TIM3_Init+0x58>)
 80009a6:	220f      	movs	r2, #15
 80009a8:	629a      	str	r2, [r3, #40]	; 0x28
    TIM3->ARR = 0xFFFF;   // Auto-reload value (maximum value for 16-bit timer)
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <TIM3_Init+0x58>)
 80009ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009b0:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM3->CCR2 = 10;      // Set the capture/compare value for channel 2
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <TIM3_Init+0x58>)
 80009b4:	220a      	movs	r2, #10
 80009b6:	639a      	str	r2, [r3, #56]	; 0x38
    TIM3->CCMR1 |= TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2;  // PWM mode 1
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <TIM3_Init+0x58>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	4a0b      	ldr	r2, [pc, #44]	; (80009ec <TIM3_Init+0x58>)
 80009be:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80009c2:	6193      	str	r3, [r2, #24]
    TIM3->CCER |= TIM_CCER_CC2E;  // Enable capture/compare channel 2
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <TIM3_Init+0x58>)
 80009c6:	6a1b      	ldr	r3, [r3, #32]
 80009c8:	4a08      	ldr	r2, [pc, #32]	; (80009ec <TIM3_Init+0x58>)
 80009ca:	f043 0310 	orr.w	r3, r3, #16
 80009ce:	6213      	str	r3, [r2, #32]

    // Start the timer
    TIM3->CR1 |= TIM_CR1_CEN;
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <TIM3_Init+0x58>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a05      	ldr	r2, [pc, #20]	; (80009ec <TIM3_Init+0x58>)
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	6013      	str	r3, [r2, #0]
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	40021000 	.word	0x40021000
 80009ec:	40000400 	.word	0x40000400

080009f0 <TIM4_Init>:

void TIM4_Init(void) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
	// Enable the clock of timer 4
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80009f4:	4b1d      	ldr	r3, [pc, #116]	; (8000a6c <TIM4_Init+0x7c>)
 80009f6:	69db      	ldr	r3, [r3, #28]
 80009f8:	4a1c      	ldr	r2, [pc, #112]	; (8000a6c <TIM4_Init+0x7c>)
 80009fa:	f043 0304 	orr.w	r3, r3, #4
 80009fe:	61d3      	str	r3, [r2, #28]

	// Set the prescaler register to divide the 16MHz clock down to 1MHz
	TIM4->PSC = 15;
 8000a00:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <TIM4_Init+0x80>)
 8000a02:	220f      	movs	r2, #15
 8000a04:	629a      	str	r2, [r3, #40]	; 0x28

	// Set the auto-reload register to the maximum value
	TIM4->ARR = 0xFFFF;
 8000a06:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <TIM4_Init+0x80>)
 8000a08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a0c:	62da      	str	r2, [r3, #44]	; 0x2c

	// Configure capture mode for Channel 1 (CCMR1 register)
	TIM4->CCMR1 |= TIM_CCMR1_CC1S_0;
 8000a0e:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <TIM4_Init+0x80>)
 8000a10:	699b      	ldr	r3, [r3, #24]
 8000a12:	4a17      	ldr	r2, [pc, #92]	; (8000a70 <TIM4_Init+0x80>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6193      	str	r3, [r2, #24]

	// Set the input filter duration to 0 in CCMR1 for Channel 1
	TIM4->CCMR1 &= ~(TIM_CCMR1_IC1F);
 8000a1a:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <TIM4_Init+0x80>)
 8000a1c:	699b      	ldr	r3, [r3, #24]
 8000a1e:	4a14      	ldr	r2, [pc, #80]	; (8000a70 <TIM4_Init+0x80>)
 8000a20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a24:	6193      	str	r3, [r2, #24]

	// Set the input prescaler so that we capture each transition for Channel 1
	TIM4->CCMR1 &= ~(TIM_CCMR1_IC1PSC);
 8000a26:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <TIM4_Init+0x80>)
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	4a11      	ldr	r2, [pc, #68]	; (8000a70 <TIM4_Init+0x80>)
 8000a2c:	f023 030c 	bic.w	r3, r3, #12
 8000a30:	6193      	str	r3, [r2, #24]

	// Set the capture to be on both rising and falling edges in CCER for Channel 1
	TIM4->CCER |= (TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000a32:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <TIM4_Init+0x80>)
 8000a34:	6a1b      	ldr	r3, [r3, #32]
 8000a36:	4a0e      	ldr	r2, [pc, #56]	; (8000a70 <TIM4_Init+0x80>)
 8000a38:	f043 030a 	orr.w	r3, r3, #10
 8000a3c:	6213      	str	r3, [r2, #32]

	// Enable capture for Channel 1
	TIM4->CCER |= TIM_CCER_CC1E;
 8000a3e:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <TIM4_Init+0x80>)
 8000a40:	6a1b      	ldr	r3, [r3, #32]
 8000a42:	4a0b      	ldr	r2, [pc, #44]	; (8000a70 <TIM4_Init+0x80>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6213      	str	r3, [r2, #32]

	// Enable the update interrupt for Timer 4
	TIM4->DIER |= TIM_DIER_UIE;
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <TIM4_Init+0x80>)
 8000a4c:	68db      	ldr	r3, [r3, #12]
 8000a4e:	4a08      	ldr	r2, [pc, #32]	; (8000a70 <TIM4_Init+0x80>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	60d3      	str	r3, [r2, #12]

	// Enable Timer 4
	TIM4->CR1 |= TIM_CR1_CEN;
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <TIM4_Init+0x80>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a05      	ldr	r2, [pc, #20]	; (8000a70 <TIM4_Init+0x80>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6013      	str	r3, [r2, #0]

	// Enable the interrupt in the NVIC
	NVIC_EnableIRQ(TIM4_IRQn);
 8000a62:	201e      	movs	r0, #30
 8000a64:	f7ff ff22 	bl	80008ac <__NVIC_EnableIRQ>
}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40000800 	.word	0x40000800

08000a74 <DisplayDistance>:

void DisplayDistance(int dist)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
	snprintf(msg, MSG_BUF_SIZE, "IDR echo: %d\n", dist);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <DisplayDistance+0x34>)
 8000a80:	2150      	movs	r1, #80	; 0x50
 8000a82:	480a      	ldr	r0, [pc, #40]	; (8000aac <DisplayDistance+0x38>)
 8000a84:	f001 fa0a 	bl	8001e9c <sniprintf>
	// Transmit the message via UART
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000a88:	4808      	ldr	r0, [pc, #32]	; (8000aac <DisplayDistance+0x38>)
 8000a8a:	f7ff fba9 	bl	80001e0 <strlen>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	f04f 33ff 	mov.w	r3, #4294967295
 8000a96:	4905      	ldr	r1, [pc, #20]	; (8000aac <DisplayDistance+0x38>)
 8000a98:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <DisplayDistance+0x3c>)
 8000a9a:	f000 fd8b 	bl	80015b4 <HAL_UART_Transmit>
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	08002814 	.word	0x08002814
 8000aac:	20000110 	.word	0x20000110
 8000ab0:	20000078 	.word	0x20000078
 8000ab4:	00000000 	.word	0x00000000

08000ab8 <TIM4_IRQHandler>:


void TIM4_IRQHandler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
    if (TIM4->SR & TIM_SR_CC1IF) {
 8000abe:	4b20      	ldr	r3, [pc, #128]	; (8000b40 <TIM4_IRQHandler+0x88>)
 8000ac0:	691b      	ldr	r3, [r3, #16]
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d030      	beq.n	8000b2c <TIM4_IRQHandler+0x74>
        if (capture_done == 0) {
 8000aca:	4b1e      	ldr	r3, [pc, #120]	; (8000b44 <TIM4_IRQHandler+0x8c>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d107      	bne.n	8000ae4 <TIM4_IRQHandler+0x2c>
            start_time = TIM4->CCR1;  // Capture the timer value on the rising edge
 8000ad4:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <TIM4_IRQHandler+0x88>)
 8000ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ad8:	4a1b      	ldr	r2, [pc, #108]	; (8000b48 <TIM4_IRQHandler+0x90>)
 8000ada:	6013      	str	r3, [r2, #0]
            capture_done = 1;
 8000adc:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <TIM4_IRQHandler+0x8c>)
 8000ade:	2201      	movs	r2, #1
 8000ae0:	701a      	strb	r2, [r3, #0]
 8000ae2:	e01d      	b.n	8000b20 <TIM4_IRQHandler+0x68>
        } else {
            end_time = TIM4->CCR1;    // Capture the timer value on the falling edge
 8000ae4:	4b16      	ldr	r3, [pc, #88]	; (8000b40 <TIM4_IRQHandler+0x88>)
 8000ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ae8:	4a18      	ldr	r2, [pc, #96]	; (8000b4c <TIM4_IRQHandler+0x94>)
 8000aea:	6013      	str	r3, [r2, #0]

            // Calculate the distance in centimeters
            // Speed of sound is approximately 343 meters per second or 0.0343 cm per microsecond
            uint32_t pulse_duration = end_time - start_time;
 8000aec:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <TIM4_IRQHandler+0x94>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <TIM4_IRQHandler+0x90>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	607b      	str	r3, [r7, #4]
            distance = (pulse_duration * 0.0343);
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f7ff fe35 	bl	8000768 <__aeabi_ui2d>
 8000afe:	a30e      	add	r3, pc, #56	; (adr r3, 8000b38 <TIM4_IRQHandler+0x80>)
 8000b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b04:	f7ff fbc4 	bl	8000290 <__aeabi_dmul>
 8000b08:	4602      	mov	r2, r0
 8000b0a:	460b      	mov	r3, r1
 8000b0c:	4610      	mov	r0, r2
 8000b0e:	4619      	mov	r1, r3
 8000b10:	f7ff fea4 	bl	800085c <__aeabi_d2iz>
 8000b14:	4603      	mov	r3, r0
 8000b16:	4a0e      	ldr	r2, [pc, #56]	; (8000b50 <TIM4_IRQHandler+0x98>)
 8000b18:	6013      	str	r3, [r2, #0]

            // Do something with the distance data, e.g., send it over UART or process it as needed
	        // Format the message with the calculated distance
            //DisplayDistance(distance);
            capture_done = 0;
 8000b1a:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <TIM4_IRQHandler+0x8c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]
        }
        TIM4->SR &= ~TIM_SR_CC1IF;  // Clear the interrupt flag
 8000b20:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <TIM4_IRQHandler+0x88>)
 8000b22:	691b      	ldr	r3, [r3, #16]
 8000b24:	4a06      	ldr	r2, [pc, #24]	; (8000b40 <TIM4_IRQHandler+0x88>)
 8000b26:	f023 0302 	bic.w	r3, r3, #2
 8000b2a:	6113      	str	r3, [r2, #16]
    }
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	f3af 8000 	nop.w
 8000b38:	04816f00 	.word	0x04816f00
 8000b3c:	3fa18fc5 	.word	0x3fa18fc5
 8000b40:	40000800 	.word	0x40000800
 8000b44:	20000108 	.word	0x20000108
 8000b48:	20000100 	.word	0x20000100
 8000b4c:	20000104 	.word	0x20000104
 8000b50:	2000010c 	.word	0x2000010c

08000b54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  HAL_Init();
 8000b58:	f000 f94e 	bl	8000df8 <HAL_Init>

  MX_USART2_UART_Init();
 8000b5c:	f000 f814 	bl	8000b88 <MX_USART2_UART_Init>
  pin_init();
 8000b60:	f7ff fee4 	bl	800092c <pin_init>
  InfraredInit();
 8000b64:	f7ff fec0 	bl	80008e8 <InfraredInit>
  //LED_Init();

  // Initialize TIM3 and TIM4
  TIM3_Init();
 8000b68:	f7ff ff14 	bl	8000994 <TIM3_Init>
  TIM4_Init();
 8000b6c:	f7ff ff40 	bl	80009f0 <TIM4_Init>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b70:	b672      	cpsid	i
}
 8000b72:	bf00      	nop
  while (1)
  {
	  //ReadInfrared();
      __disable_irq();
      DisplayDistance(distance);
 8000b74:	4b03      	ldr	r3, [pc, #12]	; (8000b84 <main+0x30>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff ff7b 	bl	8000a74 <DisplayDistance>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b7e:	b662      	cpsie	i
}
 8000b80:	bf00      	nop
      __disable_irq();
 8000b82:	e7f5      	b.n	8000b70 <main+0x1c>
 8000b84:	2000010c 	.word	0x2000010c

08000b88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b8c:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <MX_USART2_UART_Init+0x58>)
 8000b8e:	4a15      	ldr	r2, [pc, #84]	; (8000be4 <MX_USART2_UART_Init+0x5c>)
 8000b90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000b92:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <MX_USART2_UART_Init+0x58>)
 8000b94:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000b98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9a:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <MX_USART2_UART_Init+0x58>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <MX_USART2_UART_Init+0x58>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <MX_USART2_UART_Init+0x58>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <MX_USART2_UART_Init+0x58>)
 8000bae:	220c      	movs	r2, #12
 8000bb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <MX_USART2_UART_Init+0x58>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <MX_USART2_UART_Init+0x58>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bbe:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <MX_USART2_UART_Init+0x58>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <MX_USART2_UART_Init+0x58>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bca:	4805      	ldr	r0, [pc, #20]	; (8000be0 <MX_USART2_UART_Init+0x58>)
 8000bcc:	f000 fca4 	bl	8001518 <HAL_UART_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bd6:	f000 f807 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000078 	.word	0x20000078
 8000be4:	40004400 	.word	0x40004400

08000be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000bec:	b672      	cpsid	i
}
 8000bee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <Error_Handler+0x8>
	...

08000bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <HAL_MspInit+0x44>)
 8000bfc:	699b      	ldr	r3, [r3, #24]
 8000bfe:	4a0e      	ldr	r2, [pc, #56]	; (8000c38 <HAL_MspInit+0x44>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6193      	str	r3, [r2, #24]
 8000c06:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <HAL_MspInit+0x44>)
 8000c08:	699b      	ldr	r3, [r3, #24]
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <HAL_MspInit+0x44>)
 8000c14:	69db      	ldr	r3, [r3, #28]
 8000c16:	4a08      	ldr	r2, [pc, #32]	; (8000c38 <HAL_MspInit+0x44>)
 8000c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c1c:	61d3      	str	r3, [r2, #28]
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <HAL_MspInit+0x44>)
 8000c20:	69db      	ldr	r3, [r3, #28]
 8000c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c26:	603b      	str	r3, [r7, #0]
 8000c28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c2a:	2007      	movs	r0, #7
 8000c2c:	f000 f9fc 	bl	8001028 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40021000 	.word	0x40021000

08000c3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08a      	sub	sp, #40	; 0x28
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a17      	ldr	r2, [pc, #92]	; (8000cb8 <HAL_UART_MspInit+0x7c>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d128      	bne.n	8000cb0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c5e:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <HAL_UART_MspInit+0x80>)
 8000c60:	69db      	ldr	r3, [r3, #28]
 8000c62:	4a16      	ldr	r2, [pc, #88]	; (8000cbc <HAL_UART_MspInit+0x80>)
 8000c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c68:	61d3      	str	r3, [r2, #28]
 8000c6a:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <HAL_UART_MspInit+0x80>)
 8000c6c:	69db      	ldr	r3, [r3, #28]
 8000c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c72:	613b      	str	r3, [r7, #16]
 8000c74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <HAL_UART_MspInit+0x80>)
 8000c78:	695b      	ldr	r3, [r3, #20]
 8000c7a:	4a10      	ldr	r2, [pc, #64]	; (8000cbc <HAL_UART_MspInit+0x80>)
 8000c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c80:	6153      	str	r3, [r2, #20]
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_UART_MspInit+0x80>)
 8000c84:	695b      	ldr	r3, [r3, #20]
 8000c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c8e:	230c      	movs	r3, #12
 8000c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c92:	2302      	movs	r3, #2
 8000c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c9e:	2307      	movs	r3, #7
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cac:	f000 f9f0 	bl	8001090 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cb0:	bf00      	nop
 8000cb2:	3728      	adds	r7, #40	; 0x28
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40004400 	.word	0x40004400
 8000cbc:	40021000 	.word	0x40021000

08000cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <NMI_Handler+0x4>

08000cc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <HardFault_Handler+0x4>

08000ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <MemManage_Handler+0x4>

08000cd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <BusFault_Handler+0x4>

08000cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <UsageFault_Handler+0x4>

08000cde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d0c:	f000 f8ba 	bl	8000e84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d1c:	4a14      	ldr	r2, [pc, #80]	; (8000d70 <_sbrk+0x5c>)
 8000d1e:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <_sbrk+0x60>)
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d28:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <_sbrk+0x64>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d102      	bne.n	8000d36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d30:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <_sbrk+0x64>)
 8000d32:	4a12      	ldr	r2, [pc, #72]	; (8000d7c <_sbrk+0x68>)
 8000d34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d36:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <_sbrk+0x64>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d207      	bcs.n	8000d54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d44:	f001 f8de 	bl	8001f04 <__errno>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	220c      	movs	r2, #12
 8000d4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d52:	e009      	b.n	8000d68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <_sbrk+0x64>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d5a:	4b07      	ldr	r3, [pc, #28]	; (8000d78 <_sbrk+0x64>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4413      	add	r3, r2
 8000d62:	4a05      	ldr	r2, [pc, #20]	; (8000d78 <_sbrk+0x64>)
 8000d64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d66:	68fb      	ldr	r3, [r7, #12]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3718      	adds	r7, #24
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20010000 	.word	0x20010000
 8000d74:	00000400 	.word	0x00000400
 8000d78:	20000160 	.word	0x20000160
 8000d7c:	200002b0 	.word	0x200002b0

08000d80 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <SystemInit+0x20>)
 8000d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d8a:	4a05      	ldr	r2, [pc, #20]	; (8000da0 <SystemInit+0x20>)
 8000d8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000da4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ddc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000da8:	f7ff ffea 	bl	8000d80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dac:	480c      	ldr	r0, [pc, #48]	; (8000de0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dae:	490d      	ldr	r1, [pc, #52]	; (8000de4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000db0:	4a0d      	ldr	r2, [pc, #52]	; (8000de8 <LoopForever+0xe>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db4:	e002      	b.n	8000dbc <LoopCopyDataInit>

08000db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dba:	3304      	adds	r3, #4

08000dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc0:	d3f9      	bcc.n	8000db6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dc4:	4c0a      	ldr	r4, [pc, #40]	; (8000df0 <LoopForever+0x16>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc8:	e001      	b.n	8000dce <LoopFillZerobss>

08000dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dcc:	3204      	adds	r2, #4

08000dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd0:	d3fb      	bcc.n	8000dca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dd2:	f001 f89d 	bl	8001f10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dd6:	f7ff febd 	bl	8000b54 <main>

08000dda <LoopForever>:

LoopForever:
    b LoopForever
 8000dda:	e7fe      	b.n	8000dda <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ddc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000de0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000de8:	08002888 	.word	0x08002888
  ldr r2, =_sbss
 8000dec:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000df0:	200002b0 	.word	0x200002b0

08000df4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000df4:	e7fe      	b.n	8000df4 <ADC1_2_IRQHandler>
	...

08000df8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <HAL_Init+0x28>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a07      	ldr	r2, [pc, #28]	; (8000e20 <HAL_Init+0x28>)
 8000e02:	f043 0310 	orr.w	r3, r3, #16
 8000e06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e08:	2003      	movs	r0, #3
 8000e0a:	f000 f90d 	bl	8001028 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f000 f808 	bl	8000e24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e14:	f7ff feee 	bl	8000bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40022000 	.word	0x40022000

08000e24 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <HAL_InitTick+0x54>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_InitTick+0x58>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4619      	mov	r1, r3
 8000e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 f917 	bl	8001076 <HAL_SYSTICK_Config>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e00e      	b.n	8000e70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2b0f      	cmp	r3, #15
 8000e56:	d80a      	bhi.n	8000e6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e60:	f000 f8ed 	bl	800103e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e64:	4a06      	ldr	r2, [pc, #24]	; (8000e80 <HAL_InitTick+0x5c>)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e000      	b.n	8000e70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000000 	.word	0x20000000
 8000e7c:	20000008 	.word	0x20000008
 8000e80:	20000004 	.word	0x20000004

08000e84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_IncTick+0x20>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_IncTick+0x24>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4413      	add	r3, r2
 8000e94:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <HAL_IncTick+0x24>)
 8000e96:	6013      	str	r3, [r2, #0]
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20000008 	.word	0x20000008
 8000ea8:	20000164 	.word	0x20000164

08000eac <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return uwTick;  
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <HAL_GetTick+0x14>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20000164 	.word	0x20000164

08000ec4 <__NVIC_SetPriorityGrouping>:
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef6:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	60d3      	str	r3, [r2, #12]
}
 8000efc:	bf00      	nop
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_GetPriorityGrouping>:
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f10:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <__NVIC_GetPriorityGrouping+0x18>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	0a1b      	lsrs	r3, r3, #8
 8000f16:	f003 0307 	and.w	r3, r3, #7
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	6039      	str	r1, [r7, #0]
 8000f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	db0a      	blt.n	8000f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	490c      	ldr	r1, [pc, #48]	; (8000f74 <__NVIC_SetPriority+0x4c>)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	0112      	lsls	r2, r2, #4
 8000f48:	b2d2      	uxtb	r2, r2
 8000f4a:	440b      	add	r3, r1
 8000f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f50:	e00a      	b.n	8000f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	4908      	ldr	r1, [pc, #32]	; (8000f78 <__NVIC_SetPriority+0x50>)
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	f003 030f 	and.w	r3, r3, #15
 8000f5e:	3b04      	subs	r3, #4
 8000f60:	0112      	lsls	r2, r2, #4
 8000f62:	b2d2      	uxtb	r2, r2
 8000f64:	440b      	add	r3, r1
 8000f66:	761a      	strb	r2, [r3, #24]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000e100 	.word	0xe000e100
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b089      	sub	sp, #36	; 0x24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	f1c3 0307 	rsb	r3, r3, #7
 8000f96:	2b04      	cmp	r3, #4
 8000f98:	bf28      	it	cs
 8000f9a:	2304      	movcs	r3, #4
 8000f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	2b06      	cmp	r3, #6
 8000fa4:	d902      	bls.n	8000fac <NVIC_EncodePriority+0x30>
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3b03      	subs	r3, #3
 8000faa:	e000      	b.n	8000fae <NVIC_EncodePriority+0x32>
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43da      	mvns	r2, r3
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	401a      	ands	r2, r3
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	fa01 f303 	lsl.w	r3, r1, r3
 8000fce:	43d9      	mvns	r1, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	4313      	orrs	r3, r2
         );
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3724      	adds	r7, #36	; 0x24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
	...

08000fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ff4:	d301      	bcc.n	8000ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e00f      	b.n	800101a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <SysTick_Config+0x40>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001002:	210f      	movs	r1, #15
 8001004:	f04f 30ff 	mov.w	r0, #4294967295
 8001008:	f7ff ff8e 	bl	8000f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <SysTick_Config+0x40>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001012:	4b04      	ldr	r3, [pc, #16]	; (8001024 <SysTick_Config+0x40>)
 8001014:	2207      	movs	r2, #7
 8001016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	e000e010 	.word	0xe000e010

08001028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff ff47 	bl	8000ec4 <__NVIC_SetPriorityGrouping>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b086      	sub	sp, #24
 8001042:	af00      	add	r7, sp, #0
 8001044:	4603      	mov	r3, r0
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	607a      	str	r2, [r7, #4]
 800104a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001050:	f7ff ff5c 	bl	8000f0c <__NVIC_GetPriorityGrouping>
 8001054:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	68b9      	ldr	r1, [r7, #8]
 800105a:	6978      	ldr	r0, [r7, #20]
 800105c:	f7ff ff8e 	bl	8000f7c <NVIC_EncodePriority>
 8001060:	4602      	mov	r2, r0
 8001062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001066:	4611      	mov	r1, r2
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff ff5d 	bl	8000f28 <__NVIC_SetPriority>
}
 800106e:	bf00      	nop
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff ffb0 	bl	8000fe4 <SysTick_Config>
 8001084:	4603      	mov	r3, r0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001090:	b480      	push	{r7}
 8001092:	b087      	sub	sp, #28
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800109e:	e160      	b.n	8001362 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	2101      	movs	r1, #1
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	fa01 f303 	lsl.w	r3, r1, r3
 80010ac:	4013      	ands	r3, r2
 80010ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f000 8152 	beq.w	800135c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 0303 	and.w	r3, r3, #3
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d005      	beq.n	80010d0 <HAL_GPIO_Init+0x40>
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 0303 	and.w	r3, r3, #3
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d130      	bne.n	8001132 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	2203      	movs	r2, #3
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	68da      	ldr	r2, [r3, #12]
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001106:	2201      	movs	r2, #1
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4013      	ands	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	091b      	lsrs	r3, r3, #4
 800111c:	f003 0201 	and.w	r2, r3, #1
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f003 0303 	and.w	r3, r3, #3
 800113a:	2b03      	cmp	r3, #3
 800113c:	d017      	beq.n	800116e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	2203      	movs	r2, #3
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	689a      	ldr	r2, [r3, #8]
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f003 0303 	and.w	r3, r3, #3
 8001176:	2b02      	cmp	r3, #2
 8001178:	d123      	bne.n	80011c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	08da      	lsrs	r2, r3, #3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3208      	adds	r2, #8
 8001182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001186:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	220f      	movs	r2, #15
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43db      	mvns	r3, r3
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	4013      	ands	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	691a      	ldr	r2, [r3, #16]
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	f003 0307 	and.w	r3, r3, #7
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	08da      	lsrs	r2, r3, #3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3208      	adds	r2, #8
 80011bc:	6939      	ldr	r1, [r7, #16]
 80011be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	2203      	movs	r2, #3
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	4013      	ands	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 0203 	and.w	r2, r3, #3
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f000 80ac 	beq.w	800135c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001204:	4b5e      	ldr	r3, [pc, #376]	; (8001380 <HAL_GPIO_Init+0x2f0>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	4a5d      	ldr	r2, [pc, #372]	; (8001380 <HAL_GPIO_Init+0x2f0>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	6193      	str	r3, [r2, #24]
 8001210:	4b5b      	ldr	r3, [pc, #364]	; (8001380 <HAL_GPIO_Init+0x2f0>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800121c:	4a59      	ldr	r2, [pc, #356]	; (8001384 <HAL_GPIO_Init+0x2f4>)
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	089b      	lsrs	r3, r3, #2
 8001222:	3302      	adds	r3, #2
 8001224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001228:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	f003 0303 	and.w	r3, r3, #3
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	220f      	movs	r2, #15
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4013      	ands	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001246:	d025      	beq.n	8001294 <HAL_GPIO_Init+0x204>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a4f      	ldr	r2, [pc, #316]	; (8001388 <HAL_GPIO_Init+0x2f8>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d01f      	beq.n	8001290 <HAL_GPIO_Init+0x200>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a4e      	ldr	r2, [pc, #312]	; (800138c <HAL_GPIO_Init+0x2fc>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d019      	beq.n	800128c <HAL_GPIO_Init+0x1fc>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a4d      	ldr	r2, [pc, #308]	; (8001390 <HAL_GPIO_Init+0x300>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d013      	beq.n	8001288 <HAL_GPIO_Init+0x1f8>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a4c      	ldr	r2, [pc, #304]	; (8001394 <HAL_GPIO_Init+0x304>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d00d      	beq.n	8001284 <HAL_GPIO_Init+0x1f4>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a4b      	ldr	r2, [pc, #300]	; (8001398 <HAL_GPIO_Init+0x308>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d007      	beq.n	8001280 <HAL_GPIO_Init+0x1f0>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4a4a      	ldr	r2, [pc, #296]	; (800139c <HAL_GPIO_Init+0x30c>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d101      	bne.n	800127c <HAL_GPIO_Init+0x1ec>
 8001278:	2306      	movs	r3, #6
 800127a:	e00c      	b.n	8001296 <HAL_GPIO_Init+0x206>
 800127c:	2307      	movs	r3, #7
 800127e:	e00a      	b.n	8001296 <HAL_GPIO_Init+0x206>
 8001280:	2305      	movs	r3, #5
 8001282:	e008      	b.n	8001296 <HAL_GPIO_Init+0x206>
 8001284:	2304      	movs	r3, #4
 8001286:	e006      	b.n	8001296 <HAL_GPIO_Init+0x206>
 8001288:	2303      	movs	r3, #3
 800128a:	e004      	b.n	8001296 <HAL_GPIO_Init+0x206>
 800128c:	2302      	movs	r3, #2
 800128e:	e002      	b.n	8001296 <HAL_GPIO_Init+0x206>
 8001290:	2301      	movs	r3, #1
 8001292:	e000      	b.n	8001296 <HAL_GPIO_Init+0x206>
 8001294:	2300      	movs	r3, #0
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	f002 0203 	and.w	r2, r2, #3
 800129c:	0092      	lsls	r2, r2, #2
 800129e:	4093      	lsls	r3, r2
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012a6:	4937      	ldr	r1, [pc, #220]	; (8001384 <HAL_GPIO_Init+0x2f4>)
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	089b      	lsrs	r3, r3, #2
 80012ac:	3302      	adds	r3, #2
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012b4:	4b3a      	ldr	r3, [pc, #232]	; (80013a0 <HAL_GPIO_Init+0x310>)
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	43db      	mvns	r3, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4013      	ands	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d003      	beq.n	80012d8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012d8:	4a31      	ldr	r2, [pc, #196]	; (80013a0 <HAL_GPIO_Init+0x310>)
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012de:	4b30      	ldr	r3, [pc, #192]	; (80013a0 <HAL_GPIO_Init+0x310>)
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	4013      	ands	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4313      	orrs	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001302:	4a27      	ldr	r2, [pc, #156]	; (80013a0 <HAL_GPIO_Init+0x310>)
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001308:	4b25      	ldr	r3, [pc, #148]	; (80013a0 <HAL_GPIO_Init+0x310>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	43db      	mvns	r3, r3
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800132c:	4a1c      	ldr	r2, [pc, #112]	; (80013a0 <HAL_GPIO_Init+0x310>)
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001332:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <HAL_GPIO_Init+0x310>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	43db      	mvns	r3, r3
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	4013      	ands	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4313      	orrs	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001356:	4a12      	ldr	r2, [pc, #72]	; (80013a0 <HAL_GPIO_Init+0x310>)
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	3301      	adds	r3, #1
 8001360:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	fa22 f303 	lsr.w	r3, r2, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	f47f ae97 	bne.w	80010a0 <HAL_GPIO_Init+0x10>
  }
}
 8001372:	bf00      	nop
 8001374:	bf00      	nop
 8001376:	371c      	adds	r7, #28
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	40021000 	.word	0x40021000
 8001384:	40010000 	.word	0x40010000
 8001388:	48000400 	.word	0x48000400
 800138c:	48000800 	.word	0x48000800
 8001390:	48000c00 	.word	0x48000c00
 8001394:	48001000 	.word	0x48001000
 8001398:	48001400 	.word	0x48001400
 800139c:	48001800 	.word	0x48001800
 80013a0:	40010400 	.word	0x40010400

080013a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b08b      	sub	sp, #44	; 0x2c
 80013a8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
 80013ae:	2300      	movs	r3, #0
 80013b0:	61bb      	str	r3, [r7, #24]
 80013b2:	2300      	movs	r3, #0
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80013ba:	2300      	movs	r3, #0
 80013bc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80013be:	4b2a      	ldr	r3, [pc, #168]	; (8001468 <HAL_RCC_GetSysClockFreq+0xc4>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f003 030c 	and.w	r3, r3, #12
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	d002      	beq.n	80013d4 <HAL_RCC_GetSysClockFreq+0x30>
 80013ce:	2b08      	cmp	r3, #8
 80013d0:	d003      	beq.n	80013da <HAL_RCC_GetSysClockFreq+0x36>
 80013d2:	e03f      	b.n	8001454 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013d4:	4b25      	ldr	r3, [pc, #148]	; (800146c <HAL_RCC_GetSysClockFreq+0xc8>)
 80013d6:	623b      	str	r3, [r7, #32]
      break;
 80013d8:	e03f      	b.n	800145a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80013e0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80013e4:	60ba      	str	r2, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e6:	68ba      	ldr	r2, [r7, #8]
 80013e8:	fa92 f2a2 	rbit	r2, r2
 80013ec:	607a      	str	r2, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	fab2 f282 	clz	r2, r2
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	40d3      	lsrs	r3, r2
 80013f8:	4a1d      	ldr	r2, [pc, #116]	; (8001470 <HAL_RCC_GetSysClockFreq+0xcc>)
 80013fa:	5cd3      	ldrb	r3, [r2, r3]
 80013fc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80013fe:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001402:	f003 030f 	and.w	r3, r3, #15
 8001406:	220f      	movs	r2, #15
 8001408:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	fa92 f2a2 	rbit	r2, r2
 8001410:	60fa      	str	r2, [r7, #12]
  return result;
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	fab2 f282 	clz	r2, r2
 8001418:	b2d2      	uxtb	r2, r2
 800141a:	40d3      	lsrs	r3, r2
 800141c:	4a15      	ldr	r2, [pc, #84]	; (8001474 <HAL_RCC_GetSysClockFreq+0xd0>)
 800141e:	5cd3      	ldrb	r3, [r2, r3]
 8001420:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d008      	beq.n	800143e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800142c:	4a0f      	ldr	r2, [pc, #60]	; (800146c <HAL_RCC_GetSysClockFreq+0xc8>)
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	fbb2 f2f3 	udiv	r2, r2, r3
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	fb02 f303 	mul.w	r3, r2, r3
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
 800143c:	e007      	b.n	800144e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800143e:	4a0b      	ldr	r2, [pc, #44]	; (800146c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	fbb2 f2f3 	udiv	r2, r2, r3
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	fb02 f303 	mul.w	r3, r2, r3
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001450:	623b      	str	r3, [r7, #32]
      break;
 8001452:	e002      	b.n	800145a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001456:	623b      	str	r3, [r7, #32]
      break;
 8001458:	bf00      	nop
    }
  }
  return sysclockfreq;
 800145a:	6a3b      	ldr	r3, [r7, #32]
}
 800145c:	4618      	mov	r0, r3
 800145e:	372c      	adds	r7, #44	; 0x2c
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	40021000 	.word	0x40021000
 800146c:	007a1200 	.word	0x007a1200
 8001470:	0800282c 	.word	0x0800282c
 8001474:	0800283c 	.word	0x0800283c

08001478 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800147c:	4b03      	ldr	r3, [pc, #12]	; (800148c <HAL_RCC_GetHCLKFreq+0x14>)
 800147e:	681b      	ldr	r3, [r3, #0]
}
 8001480:	4618      	mov	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	20000000 	.word	0x20000000

08001490 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001496:	f7ff ffef 	bl	8001478 <HAL_RCC_GetHCLKFreq>
 800149a:	4601      	mov	r1, r0
 800149c:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80014a4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80014a8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	fa92 f2a2 	rbit	r2, r2
 80014b0:	603a      	str	r2, [r7, #0]
  return result;
 80014b2:	683a      	ldr	r2, [r7, #0]
 80014b4:	fab2 f282 	clz	r2, r2
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	40d3      	lsrs	r3, r2
 80014bc:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80014be:	5cd3      	ldrb	r3, [r2, r3]
 80014c0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80014c4:	4618      	mov	r0, r3
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40021000 	.word	0x40021000
 80014d0:	08002824 	.word	0x08002824

080014d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80014da:	f7ff ffcd 	bl	8001478 <HAL_RCC_GetHCLKFreq>
 80014de:	4601      	mov	r1, r0
 80014e0:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80014e8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80014ec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	fa92 f2a2 	rbit	r2, r2
 80014f4:	603a      	str	r2, [r7, #0]
  return result;
 80014f6:	683a      	ldr	r2, [r7, #0]
 80014f8:	fab2 f282 	clz	r2, r2
 80014fc:	b2d2      	uxtb	r2, r2
 80014fe:	40d3      	lsrs	r3, r2
 8001500:	4a04      	ldr	r2, [pc, #16]	; (8001514 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001502:	5cd3      	ldrb	r3, [r2, r3]
 8001504:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001508:	4618      	mov	r0, r3
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40021000 	.word	0x40021000
 8001514:	08002824 	.word	0x08002824

08001518 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e040      	b.n	80015ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800152e:	2b00      	cmp	r3, #0
 8001530:	d106      	bne.n	8001540 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff fb7e 	bl	8000c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2224      	movs	r2, #36	; 0x24
 8001544:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 0201 	bic.w	r2, r2, #1
 8001554:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f000 f8b6 	bl	80016c8 <UART_SetConfig>
 800155c:	4603      	mov	r3, r0
 800155e:	2b01      	cmp	r3, #1
 8001560:	d101      	bne.n	8001566 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e022      	b.n	80015ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156a:	2b00      	cmp	r3, #0
 800156c:	d002      	beq.n	8001574 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f000 fa7e 	bl	8001a70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	685a      	ldr	r2, [r3, #4]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001582:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	689a      	ldr	r2, [r3, #8]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001592:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f042 0201 	orr.w	r2, r2, #1
 80015a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f000 fb05 	bl	8001bb4 <UART_CheckIdleState>
 80015aa:	4603      	mov	r3, r0
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af02      	add	r7, sp, #8
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	4613      	mov	r3, r2
 80015c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80015c8:	2b20      	cmp	r3, #32
 80015ca:	d178      	bne.n	80016be <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d002      	beq.n	80015d8 <HAL_UART_Transmit+0x24>
 80015d2:	88fb      	ldrh	r3, [r7, #6]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d101      	bne.n	80015dc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e071      	b.n	80016c0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2200      	movs	r2, #0
 80015e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2221      	movs	r2, #33	; 0x21
 80015e8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80015ea:	f7ff fc5f 	bl	8000eac <HAL_GetTick>
 80015ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	88fa      	ldrh	r2, [r7, #6]
 80015f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	88fa      	ldrh	r2, [r7, #6]
 80015fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001608:	d108      	bne.n	800161c <HAL_UART_Transmit+0x68>
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d104      	bne.n	800161c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8001612:	2300      	movs	r3, #0
 8001614:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	61bb      	str	r3, [r7, #24]
 800161a:	e003      	b.n	8001624 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001620:	2300      	movs	r3, #0
 8001622:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001624:	e030      	b.n	8001688 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	2200      	movs	r2, #0
 800162e:	2180      	movs	r1, #128	; 0x80
 8001630:	68f8      	ldr	r0, [r7, #12]
 8001632:	f000 fb67 	bl	8001d04 <UART_WaitOnFlagUntilTimeout>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d004      	beq.n	8001646 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2220      	movs	r2, #32
 8001640:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e03c      	b.n	80016c0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d10b      	bne.n	8001664 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	881a      	ldrh	r2, [r3, #0]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001658:	b292      	uxth	r2, r2
 800165a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	3302      	adds	r3, #2
 8001660:	61bb      	str	r3, [r7, #24]
 8001662:	e008      	b.n	8001676 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	781a      	ldrb	r2, [r3, #0]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	b292      	uxth	r2, r2
 800166e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	3301      	adds	r3, #1
 8001674:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800167c:	b29b      	uxth	r3, r3
 800167e:	3b01      	subs	r3, #1
 8001680:	b29a      	uxth	r2, r3
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800168e:	b29b      	uxth	r3, r3
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1c8      	bne.n	8001626 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	2200      	movs	r2, #0
 800169c:	2140      	movs	r1, #64	; 0x40
 800169e:	68f8      	ldr	r0, [r7, #12]
 80016a0:	f000 fb30 	bl	8001d04 <UART_WaitOnFlagUntilTimeout>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d004      	beq.n	80016b4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2220      	movs	r2, #32
 80016ae:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e005      	b.n	80016c0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2220      	movs	r2, #32
 80016b8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80016ba:	2300      	movs	r3, #0
 80016bc:	e000      	b.n	80016c0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80016be:	2302      	movs	r3, #2
  }
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3720      	adds	r7, #32
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b088      	sub	sp, #32
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80016d0:	2300      	movs	r3, #0
 80016d2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	691b      	ldr	r3, [r3, #16]
 80016dc:	431a      	orrs	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	431a      	orrs	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	69db      	ldr	r3, [r3, #28]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	4b92      	ldr	r3, [pc, #584]	; (800193c <UART_SetConfig+0x274>)
 80016f4:	4013      	ands	r3, r2
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	6812      	ldr	r2, [r2, #0]
 80016fa:	6979      	ldr	r1, [r7, #20]
 80016fc:	430b      	orrs	r3, r1
 80016fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	68da      	ldr	r2, [r3, #12]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	430a      	orrs	r2, r1
 8001714:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	697a      	ldr	r2, [r7, #20]
 8001722:	4313      	orrs	r3, r2
 8001724:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	430a      	orrs	r2, r1
 8001738:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a80      	ldr	r2, [pc, #512]	; (8001940 <UART_SetConfig+0x278>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d120      	bne.n	8001786 <UART_SetConfig+0xbe>
 8001744:	4b7f      	ldr	r3, [pc, #508]	; (8001944 <UART_SetConfig+0x27c>)
 8001746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001748:	f003 0303 	and.w	r3, r3, #3
 800174c:	2b03      	cmp	r3, #3
 800174e:	d817      	bhi.n	8001780 <UART_SetConfig+0xb8>
 8001750:	a201      	add	r2, pc, #4	; (adr r2, 8001758 <UART_SetConfig+0x90>)
 8001752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001756:	bf00      	nop
 8001758:	08001769 	.word	0x08001769
 800175c:	08001775 	.word	0x08001775
 8001760:	0800177b 	.word	0x0800177b
 8001764:	0800176f 	.word	0x0800176f
 8001768:	2301      	movs	r3, #1
 800176a:	77fb      	strb	r3, [r7, #31]
 800176c:	e0b5      	b.n	80018da <UART_SetConfig+0x212>
 800176e:	2302      	movs	r3, #2
 8001770:	77fb      	strb	r3, [r7, #31]
 8001772:	e0b2      	b.n	80018da <UART_SetConfig+0x212>
 8001774:	2304      	movs	r3, #4
 8001776:	77fb      	strb	r3, [r7, #31]
 8001778:	e0af      	b.n	80018da <UART_SetConfig+0x212>
 800177a:	2308      	movs	r3, #8
 800177c:	77fb      	strb	r3, [r7, #31]
 800177e:	e0ac      	b.n	80018da <UART_SetConfig+0x212>
 8001780:	2310      	movs	r3, #16
 8001782:	77fb      	strb	r3, [r7, #31]
 8001784:	e0a9      	b.n	80018da <UART_SetConfig+0x212>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a6f      	ldr	r2, [pc, #444]	; (8001948 <UART_SetConfig+0x280>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d124      	bne.n	80017da <UART_SetConfig+0x112>
 8001790:	4b6c      	ldr	r3, [pc, #432]	; (8001944 <UART_SetConfig+0x27c>)
 8001792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001794:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001798:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800179c:	d011      	beq.n	80017c2 <UART_SetConfig+0xfa>
 800179e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80017a2:	d817      	bhi.n	80017d4 <UART_SetConfig+0x10c>
 80017a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80017a8:	d011      	beq.n	80017ce <UART_SetConfig+0x106>
 80017aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80017ae:	d811      	bhi.n	80017d4 <UART_SetConfig+0x10c>
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d003      	beq.n	80017bc <UART_SetConfig+0xf4>
 80017b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017b8:	d006      	beq.n	80017c8 <UART_SetConfig+0x100>
 80017ba:	e00b      	b.n	80017d4 <UART_SetConfig+0x10c>
 80017bc:	2300      	movs	r3, #0
 80017be:	77fb      	strb	r3, [r7, #31]
 80017c0:	e08b      	b.n	80018da <UART_SetConfig+0x212>
 80017c2:	2302      	movs	r3, #2
 80017c4:	77fb      	strb	r3, [r7, #31]
 80017c6:	e088      	b.n	80018da <UART_SetConfig+0x212>
 80017c8:	2304      	movs	r3, #4
 80017ca:	77fb      	strb	r3, [r7, #31]
 80017cc:	e085      	b.n	80018da <UART_SetConfig+0x212>
 80017ce:	2308      	movs	r3, #8
 80017d0:	77fb      	strb	r3, [r7, #31]
 80017d2:	e082      	b.n	80018da <UART_SetConfig+0x212>
 80017d4:	2310      	movs	r3, #16
 80017d6:	77fb      	strb	r3, [r7, #31]
 80017d8:	e07f      	b.n	80018da <UART_SetConfig+0x212>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a5b      	ldr	r2, [pc, #364]	; (800194c <UART_SetConfig+0x284>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d124      	bne.n	800182e <UART_SetConfig+0x166>
 80017e4:	4b57      	ldr	r3, [pc, #348]	; (8001944 <UART_SetConfig+0x27c>)
 80017e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80017ec:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80017f0:	d011      	beq.n	8001816 <UART_SetConfig+0x14e>
 80017f2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80017f6:	d817      	bhi.n	8001828 <UART_SetConfig+0x160>
 80017f8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80017fc:	d011      	beq.n	8001822 <UART_SetConfig+0x15a>
 80017fe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001802:	d811      	bhi.n	8001828 <UART_SetConfig+0x160>
 8001804:	2b00      	cmp	r3, #0
 8001806:	d003      	beq.n	8001810 <UART_SetConfig+0x148>
 8001808:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800180c:	d006      	beq.n	800181c <UART_SetConfig+0x154>
 800180e:	e00b      	b.n	8001828 <UART_SetConfig+0x160>
 8001810:	2300      	movs	r3, #0
 8001812:	77fb      	strb	r3, [r7, #31]
 8001814:	e061      	b.n	80018da <UART_SetConfig+0x212>
 8001816:	2302      	movs	r3, #2
 8001818:	77fb      	strb	r3, [r7, #31]
 800181a:	e05e      	b.n	80018da <UART_SetConfig+0x212>
 800181c:	2304      	movs	r3, #4
 800181e:	77fb      	strb	r3, [r7, #31]
 8001820:	e05b      	b.n	80018da <UART_SetConfig+0x212>
 8001822:	2308      	movs	r3, #8
 8001824:	77fb      	strb	r3, [r7, #31]
 8001826:	e058      	b.n	80018da <UART_SetConfig+0x212>
 8001828:	2310      	movs	r3, #16
 800182a:	77fb      	strb	r3, [r7, #31]
 800182c:	e055      	b.n	80018da <UART_SetConfig+0x212>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a47      	ldr	r2, [pc, #284]	; (8001950 <UART_SetConfig+0x288>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d124      	bne.n	8001882 <UART_SetConfig+0x1ba>
 8001838:	4b42      	ldr	r3, [pc, #264]	; (8001944 <UART_SetConfig+0x27c>)
 800183a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001840:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001844:	d011      	beq.n	800186a <UART_SetConfig+0x1a2>
 8001846:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800184a:	d817      	bhi.n	800187c <UART_SetConfig+0x1b4>
 800184c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001850:	d011      	beq.n	8001876 <UART_SetConfig+0x1ae>
 8001852:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001856:	d811      	bhi.n	800187c <UART_SetConfig+0x1b4>
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <UART_SetConfig+0x19c>
 800185c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001860:	d006      	beq.n	8001870 <UART_SetConfig+0x1a8>
 8001862:	e00b      	b.n	800187c <UART_SetConfig+0x1b4>
 8001864:	2300      	movs	r3, #0
 8001866:	77fb      	strb	r3, [r7, #31]
 8001868:	e037      	b.n	80018da <UART_SetConfig+0x212>
 800186a:	2302      	movs	r3, #2
 800186c:	77fb      	strb	r3, [r7, #31]
 800186e:	e034      	b.n	80018da <UART_SetConfig+0x212>
 8001870:	2304      	movs	r3, #4
 8001872:	77fb      	strb	r3, [r7, #31]
 8001874:	e031      	b.n	80018da <UART_SetConfig+0x212>
 8001876:	2308      	movs	r3, #8
 8001878:	77fb      	strb	r3, [r7, #31]
 800187a:	e02e      	b.n	80018da <UART_SetConfig+0x212>
 800187c:	2310      	movs	r3, #16
 800187e:	77fb      	strb	r3, [r7, #31]
 8001880:	e02b      	b.n	80018da <UART_SetConfig+0x212>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a33      	ldr	r2, [pc, #204]	; (8001954 <UART_SetConfig+0x28c>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d124      	bne.n	80018d6 <UART_SetConfig+0x20e>
 800188c:	4b2d      	ldr	r3, [pc, #180]	; (8001944 <UART_SetConfig+0x27c>)
 800188e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001890:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8001894:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001898:	d011      	beq.n	80018be <UART_SetConfig+0x1f6>
 800189a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800189e:	d817      	bhi.n	80018d0 <UART_SetConfig+0x208>
 80018a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80018a4:	d011      	beq.n	80018ca <UART_SetConfig+0x202>
 80018a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80018aa:	d811      	bhi.n	80018d0 <UART_SetConfig+0x208>
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <UART_SetConfig+0x1f0>
 80018b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018b4:	d006      	beq.n	80018c4 <UART_SetConfig+0x1fc>
 80018b6:	e00b      	b.n	80018d0 <UART_SetConfig+0x208>
 80018b8:	2300      	movs	r3, #0
 80018ba:	77fb      	strb	r3, [r7, #31]
 80018bc:	e00d      	b.n	80018da <UART_SetConfig+0x212>
 80018be:	2302      	movs	r3, #2
 80018c0:	77fb      	strb	r3, [r7, #31]
 80018c2:	e00a      	b.n	80018da <UART_SetConfig+0x212>
 80018c4:	2304      	movs	r3, #4
 80018c6:	77fb      	strb	r3, [r7, #31]
 80018c8:	e007      	b.n	80018da <UART_SetConfig+0x212>
 80018ca:	2308      	movs	r3, #8
 80018cc:	77fb      	strb	r3, [r7, #31]
 80018ce:	e004      	b.n	80018da <UART_SetConfig+0x212>
 80018d0:	2310      	movs	r3, #16
 80018d2:	77fb      	strb	r3, [r7, #31]
 80018d4:	e001      	b.n	80018da <UART_SetConfig+0x212>
 80018d6:	2310      	movs	r3, #16
 80018d8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018e2:	d16b      	bne.n	80019bc <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80018e4:	7ffb      	ldrb	r3, [r7, #31]
 80018e6:	2b08      	cmp	r3, #8
 80018e8:	d838      	bhi.n	800195c <UART_SetConfig+0x294>
 80018ea:	a201      	add	r2, pc, #4	; (adr r2, 80018f0 <UART_SetConfig+0x228>)
 80018ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f0:	08001915 	.word	0x08001915
 80018f4:	0800191d 	.word	0x0800191d
 80018f8:	08001925 	.word	0x08001925
 80018fc:	0800195d 	.word	0x0800195d
 8001900:	0800192b 	.word	0x0800192b
 8001904:	0800195d 	.word	0x0800195d
 8001908:	0800195d 	.word	0x0800195d
 800190c:	0800195d 	.word	0x0800195d
 8001910:	08001933 	.word	0x08001933
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001914:	f7ff fdbc 	bl	8001490 <HAL_RCC_GetPCLK1Freq>
 8001918:	61b8      	str	r0, [r7, #24]
        break;
 800191a:	e024      	b.n	8001966 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800191c:	f7ff fdda 	bl	80014d4 <HAL_RCC_GetPCLK2Freq>
 8001920:	61b8      	str	r0, [r7, #24]
        break;
 8001922:	e020      	b.n	8001966 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001924:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <UART_SetConfig+0x290>)
 8001926:	61bb      	str	r3, [r7, #24]
        break;
 8001928:	e01d      	b.n	8001966 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800192a:	f7ff fd3b 	bl	80013a4 <HAL_RCC_GetSysClockFreq>
 800192e:	61b8      	str	r0, [r7, #24]
        break;
 8001930:	e019      	b.n	8001966 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001936:	61bb      	str	r3, [r7, #24]
        break;
 8001938:	e015      	b.n	8001966 <UART_SetConfig+0x29e>
 800193a:	bf00      	nop
 800193c:	efff69f3 	.word	0xefff69f3
 8001940:	40013800 	.word	0x40013800
 8001944:	40021000 	.word	0x40021000
 8001948:	40004400 	.word	0x40004400
 800194c:	40004800 	.word	0x40004800
 8001950:	40004c00 	.word	0x40004c00
 8001954:	40005000 	.word	0x40005000
 8001958:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800195c:	2300      	movs	r3, #0
 800195e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	77bb      	strb	r3, [r7, #30]
        break;
 8001964:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d073      	beq.n	8001a54 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	005a      	lsls	r2, r3, #1
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	085b      	lsrs	r3, r3, #1
 8001976:	441a      	add	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001980:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	2b0f      	cmp	r3, #15
 8001986:	d916      	bls.n	80019b6 <UART_SetConfig+0x2ee>
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800198e:	d212      	bcs.n	80019b6 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	b29b      	uxth	r3, r3
 8001994:	f023 030f 	bic.w	r3, r3, #15
 8001998:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	085b      	lsrs	r3, r3, #1
 800199e:	b29b      	uxth	r3, r3
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	89fb      	ldrh	r3, [r7, #14]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	89fa      	ldrh	r2, [r7, #14]
 80019b2:	60da      	str	r2, [r3, #12]
 80019b4:	e04e      	b.n	8001a54 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	77bb      	strb	r3, [r7, #30]
 80019ba:	e04b      	b.n	8001a54 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80019bc:	7ffb      	ldrb	r3, [r7, #31]
 80019be:	2b08      	cmp	r3, #8
 80019c0:	d827      	bhi.n	8001a12 <UART_SetConfig+0x34a>
 80019c2:	a201      	add	r2, pc, #4	; (adr r2, 80019c8 <UART_SetConfig+0x300>)
 80019c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c8:	080019ed 	.word	0x080019ed
 80019cc:	080019f5 	.word	0x080019f5
 80019d0:	080019fd 	.word	0x080019fd
 80019d4:	08001a13 	.word	0x08001a13
 80019d8:	08001a03 	.word	0x08001a03
 80019dc:	08001a13 	.word	0x08001a13
 80019e0:	08001a13 	.word	0x08001a13
 80019e4:	08001a13 	.word	0x08001a13
 80019e8:	08001a0b 	.word	0x08001a0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80019ec:	f7ff fd50 	bl	8001490 <HAL_RCC_GetPCLK1Freq>
 80019f0:	61b8      	str	r0, [r7, #24]
        break;
 80019f2:	e013      	b.n	8001a1c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80019f4:	f7ff fd6e 	bl	80014d4 <HAL_RCC_GetPCLK2Freq>
 80019f8:	61b8      	str	r0, [r7, #24]
        break;
 80019fa:	e00f      	b.n	8001a1c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80019fc:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <UART_SetConfig+0x3a4>)
 80019fe:	61bb      	str	r3, [r7, #24]
        break;
 8001a00:	e00c      	b.n	8001a1c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001a02:	f7ff fccf 	bl	80013a4 <HAL_RCC_GetSysClockFreq>
 8001a06:	61b8      	str	r0, [r7, #24]
        break;
 8001a08:	e008      	b.n	8001a1c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001a0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a0e:	61bb      	str	r3, [r7, #24]
        break;
 8001a10:	e004      	b.n	8001a1c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	77bb      	strb	r3, [r7, #30]
        break;
 8001a1a:	bf00      	nop
    }

    if (pclk != 0U)
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d018      	beq.n	8001a54 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	085a      	lsrs	r2, r3, #1
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	441a      	add	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a34:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	2b0f      	cmp	r3, #15
 8001a3a:	d909      	bls.n	8001a50 <UART_SetConfig+0x388>
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a42:	d205      	bcs.n	8001a50 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	e001      	b.n	8001a54 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8001a60:	7fbb      	ldrb	r3, [r7, #30]
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3720      	adds	r7, #32
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	007a1200 	.word	0x007a1200

08001a70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d00a      	beq.n	8001a9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	430a      	orrs	r2, r1
 8001a98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d00a      	beq.n	8001abc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d00a      	beq.n	8001ade <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	430a      	orrs	r2, r1
 8001adc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae2:	f003 0308 	and.w	r3, r3, #8
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00a      	beq.n	8001b00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	430a      	orrs	r2, r1
 8001afe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b04:	f003 0310 	and.w	r3, r3, #16
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d00a      	beq.n	8001b22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b26:	f003 0320 	and.w	r3, r3, #32
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00a      	beq.n	8001b44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d01a      	beq.n	8001b86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	430a      	orrs	r2, r1
 8001b64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b6e:	d10a      	bne.n	8001b86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	430a      	orrs	r2, r1
 8001b84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d00a      	beq.n	8001ba8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	605a      	str	r2, [r3, #4]
  }
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b098      	sub	sp, #96	; 0x60
 8001bb8:	af02      	add	r7, sp, #8
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001bc4:	f7ff f972 	bl	8000eac <HAL_GetTick>
 8001bc8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0308 	and.w	r3, r3, #8
 8001bd4:	2b08      	cmp	r3, #8
 8001bd6:	d12e      	bne.n	8001c36 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001bd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001bdc:	9300      	str	r3, [sp, #0]
 8001bde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001be0:	2200      	movs	r2, #0
 8001be2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f88c 	bl	8001d04 <UART_WaitOnFlagUntilTimeout>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d021      	beq.n	8001c36 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bfa:	e853 3f00 	ldrex	r3, [r3]
 8001bfe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8001c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c06:	653b      	str	r3, [r7, #80]	; 0x50
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c10:	647b      	str	r3, [r7, #68]	; 0x44
 8001c12:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c14:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001c16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001c18:	e841 2300 	strex	r3, r2, [r1]
 8001c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8001c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1e6      	bne.n	8001bf2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2220      	movs	r2, #32
 8001c28:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e062      	b.n	8001cfc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	2b04      	cmp	r3, #4
 8001c42:	d149      	bne.n	8001cd8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001c44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f856 	bl	8001d04 <UART_WaitOnFlagUntilTimeout>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d03c      	beq.n	8001cd8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	e853 3f00 	ldrex	r3, [r3]
 8001c6a:	623b      	str	r3, [r7, #32]
   return(result);
 8001c6c:	6a3b      	ldr	r3, [r7, #32]
 8001c6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001c72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c7c:	633b      	str	r3, [r7, #48]	; 0x30
 8001c7e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001c82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c84:	e841 2300 	strex	r3, r2, [r1]
 8001c88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8001c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1e6      	bne.n	8001c5e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	3308      	adds	r3, #8
 8001c96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	e853 3f00 	ldrex	r3, [r3]
 8001c9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f023 0301 	bic.w	r3, r3, #1
 8001ca6:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	3308      	adds	r3, #8
 8001cae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001cb0:	61fa      	str	r2, [r7, #28]
 8001cb2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cb4:	69b9      	ldr	r1, [r7, #24]
 8001cb6:	69fa      	ldr	r2, [r7, #28]
 8001cb8:	e841 2300 	strex	r3, r2, [r1]
 8001cbc:	617b      	str	r3, [r7, #20]
   return(result);
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1e5      	bne.n	8001c90 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e011      	b.n	8001cfc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2220      	movs	r2, #32
 8001cdc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2220      	movs	r2, #32
 8001ce2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3758      	adds	r7, #88	; 0x58
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	603b      	str	r3, [r7, #0]
 8001d10:	4613      	mov	r3, r2
 8001d12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d14:	e049      	b.n	8001daa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d1c:	d045      	beq.n	8001daa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d1e:	f7ff f8c5 	bl	8000eac <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d302      	bcc.n	8001d34 <UART_WaitOnFlagUntilTimeout+0x30>
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e048      	b.n	8001dca <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0304 	and.w	r3, r3, #4
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d031      	beq.n	8001daa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	f003 0308 	and.w	r3, r3, #8
 8001d50:	2b08      	cmp	r3, #8
 8001d52:	d110      	bne.n	8001d76 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2208      	movs	r2, #8
 8001d5a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f000 f838 	bl	8001dd2 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2208      	movs	r2, #8
 8001d66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e029      	b.n	8001dca <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	69db      	ldr	r3, [r3, #28]
 8001d7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d84:	d111      	bne.n	8001daa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f000 f81e 	bl	8001dd2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2220      	movs	r2, #32
 8001d9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e00f      	b.n	8001dca <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	69da      	ldr	r2, [r3, #28]
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	4013      	ands	r3, r2
 8001db4:	68ba      	ldr	r2, [r7, #8]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	bf0c      	ite	eq
 8001dba:	2301      	moveq	r3, #1
 8001dbc:	2300      	movne	r3, #0
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d0a6      	beq.n	8001d16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b095      	sub	sp, #84	; 0x54
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001de2:	e853 3f00 	ldrex	r3, [r3]
 8001de6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001dee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	461a      	mov	r2, r3
 8001df6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001df8:	643b      	str	r3, [r7, #64]	; 0x40
 8001dfa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dfc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001dfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001e00:	e841 2300 	strex	r3, r2, [r1]
 8001e04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1e6      	bne.n	8001dda <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	3308      	adds	r3, #8
 8001e12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e14:	6a3b      	ldr	r3, [r7, #32]
 8001e16:	e853 3f00 	ldrex	r3, [r3]
 8001e1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f023 0301 	bic.w	r3, r3, #1
 8001e22:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	3308      	adds	r3, #8
 8001e2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e34:	e841 2300 	strex	r3, r2, [r1]
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1e5      	bne.n	8001e0c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d118      	bne.n	8001e7a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	e853 3f00 	ldrex	r3, [r3]
 8001e54:	60bb      	str	r3, [r7, #8]
   return(result);
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	f023 0310 	bic.w	r3, r3, #16
 8001e5c:	647b      	str	r3, [r7, #68]	; 0x44
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	461a      	mov	r2, r3
 8001e64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e66:	61bb      	str	r3, [r7, #24]
 8001e68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e6a:	6979      	ldr	r1, [r7, #20]
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	e841 2300 	strex	r3, r2, [r1]
 8001e72:	613b      	str	r3, [r7, #16]
   return(result);
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1e6      	bne.n	8001e48 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2220      	movs	r2, #32
 8001e7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8001e8e:	bf00      	nop
 8001e90:	3754      	adds	r7, #84	; 0x54
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <sniprintf>:
 8001e9c:	b40c      	push	{r2, r3}
 8001e9e:	b530      	push	{r4, r5, lr}
 8001ea0:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <sniprintf+0x64>)
 8001ea2:	1e0c      	subs	r4, r1, #0
 8001ea4:	681d      	ldr	r5, [r3, #0]
 8001ea6:	b09d      	sub	sp, #116	; 0x74
 8001ea8:	da08      	bge.n	8001ebc <sniprintf+0x20>
 8001eaa:	238b      	movs	r3, #139	; 0x8b
 8001eac:	602b      	str	r3, [r5, #0]
 8001eae:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb2:	b01d      	add	sp, #116	; 0x74
 8001eb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001eb8:	b002      	add	sp, #8
 8001eba:	4770      	bx	lr
 8001ebc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8001ec0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001ec4:	bf14      	ite	ne
 8001ec6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8001eca:	4623      	moveq	r3, r4
 8001ecc:	9304      	str	r3, [sp, #16]
 8001ece:	9307      	str	r3, [sp, #28]
 8001ed0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ed4:	9002      	str	r0, [sp, #8]
 8001ed6:	9006      	str	r0, [sp, #24]
 8001ed8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8001edc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8001ede:	ab21      	add	r3, sp, #132	; 0x84
 8001ee0:	a902      	add	r1, sp, #8
 8001ee2:	4628      	mov	r0, r5
 8001ee4:	9301      	str	r3, [sp, #4]
 8001ee6:	f000 f98b 	bl	8002200 <_svfiprintf_r>
 8001eea:	1c43      	adds	r3, r0, #1
 8001eec:	bfbc      	itt	lt
 8001eee:	238b      	movlt	r3, #139	; 0x8b
 8001ef0:	602b      	strlt	r3, [r5, #0]
 8001ef2:	2c00      	cmp	r4, #0
 8001ef4:	d0dd      	beq.n	8001eb2 <sniprintf+0x16>
 8001ef6:	9b02      	ldr	r3, [sp, #8]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	701a      	strb	r2, [r3, #0]
 8001efc:	e7d9      	b.n	8001eb2 <sniprintf+0x16>
 8001efe:	bf00      	nop
 8001f00:	20000058 	.word	0x20000058

08001f04 <__errno>:
 8001f04:	4b01      	ldr	r3, [pc, #4]	; (8001f0c <__errno+0x8>)
 8001f06:	6818      	ldr	r0, [r3, #0]
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	20000058 	.word	0x20000058

08001f10 <__libc_init_array>:
 8001f10:	b570      	push	{r4, r5, r6, lr}
 8001f12:	4d0d      	ldr	r5, [pc, #52]	; (8001f48 <__libc_init_array+0x38>)
 8001f14:	4c0d      	ldr	r4, [pc, #52]	; (8001f4c <__libc_init_array+0x3c>)
 8001f16:	1b64      	subs	r4, r4, r5
 8001f18:	10a4      	asrs	r4, r4, #2
 8001f1a:	2600      	movs	r6, #0
 8001f1c:	42a6      	cmp	r6, r4
 8001f1e:	d109      	bne.n	8001f34 <__libc_init_array+0x24>
 8001f20:	4d0b      	ldr	r5, [pc, #44]	; (8001f50 <__libc_init_array+0x40>)
 8001f22:	4c0c      	ldr	r4, [pc, #48]	; (8001f54 <__libc_init_array+0x44>)
 8001f24:	f000 fc6a 	bl	80027fc <_init>
 8001f28:	1b64      	subs	r4, r4, r5
 8001f2a:	10a4      	asrs	r4, r4, #2
 8001f2c:	2600      	movs	r6, #0
 8001f2e:	42a6      	cmp	r6, r4
 8001f30:	d105      	bne.n	8001f3e <__libc_init_array+0x2e>
 8001f32:	bd70      	pop	{r4, r5, r6, pc}
 8001f34:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f38:	4798      	blx	r3
 8001f3a:	3601      	adds	r6, #1
 8001f3c:	e7ee      	b.n	8001f1c <__libc_init_array+0xc>
 8001f3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f42:	4798      	blx	r3
 8001f44:	3601      	adds	r6, #1
 8001f46:	e7f2      	b.n	8001f2e <__libc_init_array+0x1e>
 8001f48:	08002880 	.word	0x08002880
 8001f4c:	08002880 	.word	0x08002880
 8001f50:	08002880 	.word	0x08002880
 8001f54:	08002884 	.word	0x08002884

08001f58 <__retarget_lock_acquire_recursive>:
 8001f58:	4770      	bx	lr

08001f5a <__retarget_lock_release_recursive>:
 8001f5a:	4770      	bx	lr

08001f5c <_free_r>:
 8001f5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001f5e:	2900      	cmp	r1, #0
 8001f60:	d044      	beq.n	8001fec <_free_r+0x90>
 8001f62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f66:	9001      	str	r0, [sp, #4]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f1a1 0404 	sub.w	r4, r1, #4
 8001f6e:	bfb8      	it	lt
 8001f70:	18e4      	addlt	r4, r4, r3
 8001f72:	f000 f8df 	bl	8002134 <__malloc_lock>
 8001f76:	4a1e      	ldr	r2, [pc, #120]	; (8001ff0 <_free_r+0x94>)
 8001f78:	9801      	ldr	r0, [sp, #4]
 8001f7a:	6813      	ldr	r3, [r2, #0]
 8001f7c:	b933      	cbnz	r3, 8001f8c <_free_r+0x30>
 8001f7e:	6063      	str	r3, [r4, #4]
 8001f80:	6014      	str	r4, [r2, #0]
 8001f82:	b003      	add	sp, #12
 8001f84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001f88:	f000 b8da 	b.w	8002140 <__malloc_unlock>
 8001f8c:	42a3      	cmp	r3, r4
 8001f8e:	d908      	bls.n	8001fa2 <_free_r+0x46>
 8001f90:	6825      	ldr	r5, [r4, #0]
 8001f92:	1961      	adds	r1, r4, r5
 8001f94:	428b      	cmp	r3, r1
 8001f96:	bf01      	itttt	eq
 8001f98:	6819      	ldreq	r1, [r3, #0]
 8001f9a:	685b      	ldreq	r3, [r3, #4]
 8001f9c:	1949      	addeq	r1, r1, r5
 8001f9e:	6021      	streq	r1, [r4, #0]
 8001fa0:	e7ed      	b.n	8001f7e <_free_r+0x22>
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	b10b      	cbz	r3, 8001fac <_free_r+0x50>
 8001fa8:	42a3      	cmp	r3, r4
 8001faa:	d9fa      	bls.n	8001fa2 <_free_r+0x46>
 8001fac:	6811      	ldr	r1, [r2, #0]
 8001fae:	1855      	adds	r5, r2, r1
 8001fb0:	42a5      	cmp	r5, r4
 8001fb2:	d10b      	bne.n	8001fcc <_free_r+0x70>
 8001fb4:	6824      	ldr	r4, [r4, #0]
 8001fb6:	4421      	add	r1, r4
 8001fb8:	1854      	adds	r4, r2, r1
 8001fba:	42a3      	cmp	r3, r4
 8001fbc:	6011      	str	r1, [r2, #0]
 8001fbe:	d1e0      	bne.n	8001f82 <_free_r+0x26>
 8001fc0:	681c      	ldr	r4, [r3, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	6053      	str	r3, [r2, #4]
 8001fc6:	440c      	add	r4, r1
 8001fc8:	6014      	str	r4, [r2, #0]
 8001fca:	e7da      	b.n	8001f82 <_free_r+0x26>
 8001fcc:	d902      	bls.n	8001fd4 <_free_r+0x78>
 8001fce:	230c      	movs	r3, #12
 8001fd0:	6003      	str	r3, [r0, #0]
 8001fd2:	e7d6      	b.n	8001f82 <_free_r+0x26>
 8001fd4:	6825      	ldr	r5, [r4, #0]
 8001fd6:	1961      	adds	r1, r4, r5
 8001fd8:	428b      	cmp	r3, r1
 8001fda:	bf04      	itt	eq
 8001fdc:	6819      	ldreq	r1, [r3, #0]
 8001fde:	685b      	ldreq	r3, [r3, #4]
 8001fe0:	6063      	str	r3, [r4, #4]
 8001fe2:	bf04      	itt	eq
 8001fe4:	1949      	addeq	r1, r1, r5
 8001fe6:	6021      	streq	r1, [r4, #0]
 8001fe8:	6054      	str	r4, [r2, #4]
 8001fea:	e7ca      	b.n	8001f82 <_free_r+0x26>
 8001fec:	b003      	add	sp, #12
 8001fee:	bd30      	pop	{r4, r5, pc}
 8001ff0:	200002a8 	.word	0x200002a8

08001ff4 <sbrk_aligned>:
 8001ff4:	b570      	push	{r4, r5, r6, lr}
 8001ff6:	4e0e      	ldr	r6, [pc, #56]	; (8002030 <sbrk_aligned+0x3c>)
 8001ff8:	460c      	mov	r4, r1
 8001ffa:	6831      	ldr	r1, [r6, #0]
 8001ffc:	4605      	mov	r5, r0
 8001ffe:	b911      	cbnz	r1, 8002006 <sbrk_aligned+0x12>
 8002000:	f000 fba6 	bl	8002750 <_sbrk_r>
 8002004:	6030      	str	r0, [r6, #0]
 8002006:	4621      	mov	r1, r4
 8002008:	4628      	mov	r0, r5
 800200a:	f000 fba1 	bl	8002750 <_sbrk_r>
 800200e:	1c43      	adds	r3, r0, #1
 8002010:	d00a      	beq.n	8002028 <sbrk_aligned+0x34>
 8002012:	1cc4      	adds	r4, r0, #3
 8002014:	f024 0403 	bic.w	r4, r4, #3
 8002018:	42a0      	cmp	r0, r4
 800201a:	d007      	beq.n	800202c <sbrk_aligned+0x38>
 800201c:	1a21      	subs	r1, r4, r0
 800201e:	4628      	mov	r0, r5
 8002020:	f000 fb96 	bl	8002750 <_sbrk_r>
 8002024:	3001      	adds	r0, #1
 8002026:	d101      	bne.n	800202c <sbrk_aligned+0x38>
 8002028:	f04f 34ff 	mov.w	r4, #4294967295
 800202c:	4620      	mov	r0, r4
 800202e:	bd70      	pop	{r4, r5, r6, pc}
 8002030:	200002ac 	.word	0x200002ac

08002034 <_malloc_r>:
 8002034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002038:	1ccd      	adds	r5, r1, #3
 800203a:	f025 0503 	bic.w	r5, r5, #3
 800203e:	3508      	adds	r5, #8
 8002040:	2d0c      	cmp	r5, #12
 8002042:	bf38      	it	cc
 8002044:	250c      	movcc	r5, #12
 8002046:	2d00      	cmp	r5, #0
 8002048:	4607      	mov	r7, r0
 800204a:	db01      	blt.n	8002050 <_malloc_r+0x1c>
 800204c:	42a9      	cmp	r1, r5
 800204e:	d905      	bls.n	800205c <_malloc_r+0x28>
 8002050:	230c      	movs	r3, #12
 8002052:	603b      	str	r3, [r7, #0]
 8002054:	2600      	movs	r6, #0
 8002056:	4630      	mov	r0, r6
 8002058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800205c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002130 <_malloc_r+0xfc>
 8002060:	f000 f868 	bl	8002134 <__malloc_lock>
 8002064:	f8d8 3000 	ldr.w	r3, [r8]
 8002068:	461c      	mov	r4, r3
 800206a:	bb5c      	cbnz	r4, 80020c4 <_malloc_r+0x90>
 800206c:	4629      	mov	r1, r5
 800206e:	4638      	mov	r0, r7
 8002070:	f7ff ffc0 	bl	8001ff4 <sbrk_aligned>
 8002074:	1c43      	adds	r3, r0, #1
 8002076:	4604      	mov	r4, r0
 8002078:	d155      	bne.n	8002126 <_malloc_r+0xf2>
 800207a:	f8d8 4000 	ldr.w	r4, [r8]
 800207e:	4626      	mov	r6, r4
 8002080:	2e00      	cmp	r6, #0
 8002082:	d145      	bne.n	8002110 <_malloc_r+0xdc>
 8002084:	2c00      	cmp	r4, #0
 8002086:	d048      	beq.n	800211a <_malloc_r+0xe6>
 8002088:	6823      	ldr	r3, [r4, #0]
 800208a:	4631      	mov	r1, r6
 800208c:	4638      	mov	r0, r7
 800208e:	eb04 0903 	add.w	r9, r4, r3
 8002092:	f000 fb5d 	bl	8002750 <_sbrk_r>
 8002096:	4581      	cmp	r9, r0
 8002098:	d13f      	bne.n	800211a <_malloc_r+0xe6>
 800209a:	6821      	ldr	r1, [r4, #0]
 800209c:	1a6d      	subs	r5, r5, r1
 800209e:	4629      	mov	r1, r5
 80020a0:	4638      	mov	r0, r7
 80020a2:	f7ff ffa7 	bl	8001ff4 <sbrk_aligned>
 80020a6:	3001      	adds	r0, #1
 80020a8:	d037      	beq.n	800211a <_malloc_r+0xe6>
 80020aa:	6823      	ldr	r3, [r4, #0]
 80020ac:	442b      	add	r3, r5
 80020ae:	6023      	str	r3, [r4, #0]
 80020b0:	f8d8 3000 	ldr.w	r3, [r8]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d038      	beq.n	800212a <_malloc_r+0xf6>
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	42a2      	cmp	r2, r4
 80020bc:	d12b      	bne.n	8002116 <_malloc_r+0xe2>
 80020be:	2200      	movs	r2, #0
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	e00f      	b.n	80020e4 <_malloc_r+0xb0>
 80020c4:	6822      	ldr	r2, [r4, #0]
 80020c6:	1b52      	subs	r2, r2, r5
 80020c8:	d41f      	bmi.n	800210a <_malloc_r+0xd6>
 80020ca:	2a0b      	cmp	r2, #11
 80020cc:	d917      	bls.n	80020fe <_malloc_r+0xca>
 80020ce:	1961      	adds	r1, r4, r5
 80020d0:	42a3      	cmp	r3, r4
 80020d2:	6025      	str	r5, [r4, #0]
 80020d4:	bf18      	it	ne
 80020d6:	6059      	strne	r1, [r3, #4]
 80020d8:	6863      	ldr	r3, [r4, #4]
 80020da:	bf08      	it	eq
 80020dc:	f8c8 1000 	streq.w	r1, [r8]
 80020e0:	5162      	str	r2, [r4, r5]
 80020e2:	604b      	str	r3, [r1, #4]
 80020e4:	4638      	mov	r0, r7
 80020e6:	f104 060b 	add.w	r6, r4, #11
 80020ea:	f000 f829 	bl	8002140 <__malloc_unlock>
 80020ee:	f026 0607 	bic.w	r6, r6, #7
 80020f2:	1d23      	adds	r3, r4, #4
 80020f4:	1af2      	subs	r2, r6, r3
 80020f6:	d0ae      	beq.n	8002056 <_malloc_r+0x22>
 80020f8:	1b9b      	subs	r3, r3, r6
 80020fa:	50a3      	str	r3, [r4, r2]
 80020fc:	e7ab      	b.n	8002056 <_malloc_r+0x22>
 80020fe:	42a3      	cmp	r3, r4
 8002100:	6862      	ldr	r2, [r4, #4]
 8002102:	d1dd      	bne.n	80020c0 <_malloc_r+0x8c>
 8002104:	f8c8 2000 	str.w	r2, [r8]
 8002108:	e7ec      	b.n	80020e4 <_malloc_r+0xb0>
 800210a:	4623      	mov	r3, r4
 800210c:	6864      	ldr	r4, [r4, #4]
 800210e:	e7ac      	b.n	800206a <_malloc_r+0x36>
 8002110:	4634      	mov	r4, r6
 8002112:	6876      	ldr	r6, [r6, #4]
 8002114:	e7b4      	b.n	8002080 <_malloc_r+0x4c>
 8002116:	4613      	mov	r3, r2
 8002118:	e7cc      	b.n	80020b4 <_malloc_r+0x80>
 800211a:	230c      	movs	r3, #12
 800211c:	603b      	str	r3, [r7, #0]
 800211e:	4638      	mov	r0, r7
 8002120:	f000 f80e 	bl	8002140 <__malloc_unlock>
 8002124:	e797      	b.n	8002056 <_malloc_r+0x22>
 8002126:	6025      	str	r5, [r4, #0]
 8002128:	e7dc      	b.n	80020e4 <_malloc_r+0xb0>
 800212a:	605b      	str	r3, [r3, #4]
 800212c:	deff      	udf	#255	; 0xff
 800212e:	bf00      	nop
 8002130:	200002a8 	.word	0x200002a8

08002134 <__malloc_lock>:
 8002134:	4801      	ldr	r0, [pc, #4]	; (800213c <__malloc_lock+0x8>)
 8002136:	f7ff bf0f 	b.w	8001f58 <__retarget_lock_acquire_recursive>
 800213a:	bf00      	nop
 800213c:	200002a4 	.word	0x200002a4

08002140 <__malloc_unlock>:
 8002140:	4801      	ldr	r0, [pc, #4]	; (8002148 <__malloc_unlock+0x8>)
 8002142:	f7ff bf0a 	b.w	8001f5a <__retarget_lock_release_recursive>
 8002146:	bf00      	nop
 8002148:	200002a4 	.word	0x200002a4

0800214c <__ssputs_r>:
 800214c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002150:	688e      	ldr	r6, [r1, #8]
 8002152:	461f      	mov	r7, r3
 8002154:	42be      	cmp	r6, r7
 8002156:	680b      	ldr	r3, [r1, #0]
 8002158:	4682      	mov	sl, r0
 800215a:	460c      	mov	r4, r1
 800215c:	4690      	mov	r8, r2
 800215e:	d82c      	bhi.n	80021ba <__ssputs_r+0x6e>
 8002160:	898a      	ldrh	r2, [r1, #12]
 8002162:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002166:	d026      	beq.n	80021b6 <__ssputs_r+0x6a>
 8002168:	6965      	ldr	r5, [r4, #20]
 800216a:	6909      	ldr	r1, [r1, #16]
 800216c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002170:	eba3 0901 	sub.w	r9, r3, r1
 8002174:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002178:	1c7b      	adds	r3, r7, #1
 800217a:	444b      	add	r3, r9
 800217c:	106d      	asrs	r5, r5, #1
 800217e:	429d      	cmp	r5, r3
 8002180:	bf38      	it	cc
 8002182:	461d      	movcc	r5, r3
 8002184:	0553      	lsls	r3, r2, #21
 8002186:	d527      	bpl.n	80021d8 <__ssputs_r+0x8c>
 8002188:	4629      	mov	r1, r5
 800218a:	f7ff ff53 	bl	8002034 <_malloc_r>
 800218e:	4606      	mov	r6, r0
 8002190:	b360      	cbz	r0, 80021ec <__ssputs_r+0xa0>
 8002192:	6921      	ldr	r1, [r4, #16]
 8002194:	464a      	mov	r2, r9
 8002196:	f000 faeb 	bl	8002770 <memcpy>
 800219a:	89a3      	ldrh	r3, [r4, #12]
 800219c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80021a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021a4:	81a3      	strh	r3, [r4, #12]
 80021a6:	6126      	str	r6, [r4, #16]
 80021a8:	6165      	str	r5, [r4, #20]
 80021aa:	444e      	add	r6, r9
 80021ac:	eba5 0509 	sub.w	r5, r5, r9
 80021b0:	6026      	str	r6, [r4, #0]
 80021b2:	60a5      	str	r5, [r4, #8]
 80021b4:	463e      	mov	r6, r7
 80021b6:	42be      	cmp	r6, r7
 80021b8:	d900      	bls.n	80021bc <__ssputs_r+0x70>
 80021ba:	463e      	mov	r6, r7
 80021bc:	6820      	ldr	r0, [r4, #0]
 80021be:	4632      	mov	r2, r6
 80021c0:	4641      	mov	r1, r8
 80021c2:	f000 faab 	bl	800271c <memmove>
 80021c6:	68a3      	ldr	r3, [r4, #8]
 80021c8:	1b9b      	subs	r3, r3, r6
 80021ca:	60a3      	str	r3, [r4, #8]
 80021cc:	6823      	ldr	r3, [r4, #0]
 80021ce:	4433      	add	r3, r6
 80021d0:	6023      	str	r3, [r4, #0]
 80021d2:	2000      	movs	r0, #0
 80021d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021d8:	462a      	mov	r2, r5
 80021da:	f000 fad7 	bl	800278c <_realloc_r>
 80021de:	4606      	mov	r6, r0
 80021e0:	2800      	cmp	r0, #0
 80021e2:	d1e0      	bne.n	80021a6 <__ssputs_r+0x5a>
 80021e4:	6921      	ldr	r1, [r4, #16]
 80021e6:	4650      	mov	r0, sl
 80021e8:	f7ff feb8 	bl	8001f5c <_free_r>
 80021ec:	230c      	movs	r3, #12
 80021ee:	f8ca 3000 	str.w	r3, [sl]
 80021f2:	89a3      	ldrh	r3, [r4, #12]
 80021f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021f8:	81a3      	strh	r3, [r4, #12]
 80021fa:	f04f 30ff 	mov.w	r0, #4294967295
 80021fe:	e7e9      	b.n	80021d4 <__ssputs_r+0x88>

08002200 <_svfiprintf_r>:
 8002200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002204:	4698      	mov	r8, r3
 8002206:	898b      	ldrh	r3, [r1, #12]
 8002208:	061b      	lsls	r3, r3, #24
 800220a:	b09d      	sub	sp, #116	; 0x74
 800220c:	4607      	mov	r7, r0
 800220e:	460d      	mov	r5, r1
 8002210:	4614      	mov	r4, r2
 8002212:	d50e      	bpl.n	8002232 <_svfiprintf_r+0x32>
 8002214:	690b      	ldr	r3, [r1, #16]
 8002216:	b963      	cbnz	r3, 8002232 <_svfiprintf_r+0x32>
 8002218:	2140      	movs	r1, #64	; 0x40
 800221a:	f7ff ff0b 	bl	8002034 <_malloc_r>
 800221e:	6028      	str	r0, [r5, #0]
 8002220:	6128      	str	r0, [r5, #16]
 8002222:	b920      	cbnz	r0, 800222e <_svfiprintf_r+0x2e>
 8002224:	230c      	movs	r3, #12
 8002226:	603b      	str	r3, [r7, #0]
 8002228:	f04f 30ff 	mov.w	r0, #4294967295
 800222c:	e0d0      	b.n	80023d0 <_svfiprintf_r+0x1d0>
 800222e:	2340      	movs	r3, #64	; 0x40
 8002230:	616b      	str	r3, [r5, #20]
 8002232:	2300      	movs	r3, #0
 8002234:	9309      	str	r3, [sp, #36]	; 0x24
 8002236:	2320      	movs	r3, #32
 8002238:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800223c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002240:	2330      	movs	r3, #48	; 0x30
 8002242:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80023e8 <_svfiprintf_r+0x1e8>
 8002246:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800224a:	f04f 0901 	mov.w	r9, #1
 800224e:	4623      	mov	r3, r4
 8002250:	469a      	mov	sl, r3
 8002252:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002256:	b10a      	cbz	r2, 800225c <_svfiprintf_r+0x5c>
 8002258:	2a25      	cmp	r2, #37	; 0x25
 800225a:	d1f9      	bne.n	8002250 <_svfiprintf_r+0x50>
 800225c:	ebba 0b04 	subs.w	fp, sl, r4
 8002260:	d00b      	beq.n	800227a <_svfiprintf_r+0x7a>
 8002262:	465b      	mov	r3, fp
 8002264:	4622      	mov	r2, r4
 8002266:	4629      	mov	r1, r5
 8002268:	4638      	mov	r0, r7
 800226a:	f7ff ff6f 	bl	800214c <__ssputs_r>
 800226e:	3001      	adds	r0, #1
 8002270:	f000 80a9 	beq.w	80023c6 <_svfiprintf_r+0x1c6>
 8002274:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002276:	445a      	add	r2, fp
 8002278:	9209      	str	r2, [sp, #36]	; 0x24
 800227a:	f89a 3000 	ldrb.w	r3, [sl]
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 80a1 	beq.w	80023c6 <_svfiprintf_r+0x1c6>
 8002284:	2300      	movs	r3, #0
 8002286:	f04f 32ff 	mov.w	r2, #4294967295
 800228a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800228e:	f10a 0a01 	add.w	sl, sl, #1
 8002292:	9304      	str	r3, [sp, #16]
 8002294:	9307      	str	r3, [sp, #28]
 8002296:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800229a:	931a      	str	r3, [sp, #104]	; 0x68
 800229c:	4654      	mov	r4, sl
 800229e:	2205      	movs	r2, #5
 80022a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80022a4:	4850      	ldr	r0, [pc, #320]	; (80023e8 <_svfiprintf_r+0x1e8>)
 80022a6:	f7fd ffa3 	bl	80001f0 <memchr>
 80022aa:	9a04      	ldr	r2, [sp, #16]
 80022ac:	b9d8      	cbnz	r0, 80022e6 <_svfiprintf_r+0xe6>
 80022ae:	06d0      	lsls	r0, r2, #27
 80022b0:	bf44      	itt	mi
 80022b2:	2320      	movmi	r3, #32
 80022b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80022b8:	0711      	lsls	r1, r2, #28
 80022ba:	bf44      	itt	mi
 80022bc:	232b      	movmi	r3, #43	; 0x2b
 80022be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80022c2:	f89a 3000 	ldrb.w	r3, [sl]
 80022c6:	2b2a      	cmp	r3, #42	; 0x2a
 80022c8:	d015      	beq.n	80022f6 <_svfiprintf_r+0xf6>
 80022ca:	9a07      	ldr	r2, [sp, #28]
 80022cc:	4654      	mov	r4, sl
 80022ce:	2000      	movs	r0, #0
 80022d0:	f04f 0c0a 	mov.w	ip, #10
 80022d4:	4621      	mov	r1, r4
 80022d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80022da:	3b30      	subs	r3, #48	; 0x30
 80022dc:	2b09      	cmp	r3, #9
 80022de:	d94d      	bls.n	800237c <_svfiprintf_r+0x17c>
 80022e0:	b1b0      	cbz	r0, 8002310 <_svfiprintf_r+0x110>
 80022e2:	9207      	str	r2, [sp, #28]
 80022e4:	e014      	b.n	8002310 <_svfiprintf_r+0x110>
 80022e6:	eba0 0308 	sub.w	r3, r0, r8
 80022ea:	fa09 f303 	lsl.w	r3, r9, r3
 80022ee:	4313      	orrs	r3, r2
 80022f0:	9304      	str	r3, [sp, #16]
 80022f2:	46a2      	mov	sl, r4
 80022f4:	e7d2      	b.n	800229c <_svfiprintf_r+0x9c>
 80022f6:	9b03      	ldr	r3, [sp, #12]
 80022f8:	1d19      	adds	r1, r3, #4
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	9103      	str	r1, [sp, #12]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	bfbb      	ittet	lt
 8002302:	425b      	neglt	r3, r3
 8002304:	f042 0202 	orrlt.w	r2, r2, #2
 8002308:	9307      	strge	r3, [sp, #28]
 800230a:	9307      	strlt	r3, [sp, #28]
 800230c:	bfb8      	it	lt
 800230e:	9204      	strlt	r2, [sp, #16]
 8002310:	7823      	ldrb	r3, [r4, #0]
 8002312:	2b2e      	cmp	r3, #46	; 0x2e
 8002314:	d10c      	bne.n	8002330 <_svfiprintf_r+0x130>
 8002316:	7863      	ldrb	r3, [r4, #1]
 8002318:	2b2a      	cmp	r3, #42	; 0x2a
 800231a:	d134      	bne.n	8002386 <_svfiprintf_r+0x186>
 800231c:	9b03      	ldr	r3, [sp, #12]
 800231e:	1d1a      	adds	r2, r3, #4
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	9203      	str	r2, [sp, #12]
 8002324:	2b00      	cmp	r3, #0
 8002326:	bfb8      	it	lt
 8002328:	f04f 33ff 	movlt.w	r3, #4294967295
 800232c:	3402      	adds	r4, #2
 800232e:	9305      	str	r3, [sp, #20]
 8002330:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80023f8 <_svfiprintf_r+0x1f8>
 8002334:	7821      	ldrb	r1, [r4, #0]
 8002336:	2203      	movs	r2, #3
 8002338:	4650      	mov	r0, sl
 800233a:	f7fd ff59 	bl	80001f0 <memchr>
 800233e:	b138      	cbz	r0, 8002350 <_svfiprintf_r+0x150>
 8002340:	9b04      	ldr	r3, [sp, #16]
 8002342:	eba0 000a 	sub.w	r0, r0, sl
 8002346:	2240      	movs	r2, #64	; 0x40
 8002348:	4082      	lsls	r2, r0
 800234a:	4313      	orrs	r3, r2
 800234c:	3401      	adds	r4, #1
 800234e:	9304      	str	r3, [sp, #16]
 8002350:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002354:	4825      	ldr	r0, [pc, #148]	; (80023ec <_svfiprintf_r+0x1ec>)
 8002356:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800235a:	2206      	movs	r2, #6
 800235c:	f7fd ff48 	bl	80001f0 <memchr>
 8002360:	2800      	cmp	r0, #0
 8002362:	d038      	beq.n	80023d6 <_svfiprintf_r+0x1d6>
 8002364:	4b22      	ldr	r3, [pc, #136]	; (80023f0 <_svfiprintf_r+0x1f0>)
 8002366:	bb1b      	cbnz	r3, 80023b0 <_svfiprintf_r+0x1b0>
 8002368:	9b03      	ldr	r3, [sp, #12]
 800236a:	3307      	adds	r3, #7
 800236c:	f023 0307 	bic.w	r3, r3, #7
 8002370:	3308      	adds	r3, #8
 8002372:	9303      	str	r3, [sp, #12]
 8002374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002376:	4433      	add	r3, r6
 8002378:	9309      	str	r3, [sp, #36]	; 0x24
 800237a:	e768      	b.n	800224e <_svfiprintf_r+0x4e>
 800237c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002380:	460c      	mov	r4, r1
 8002382:	2001      	movs	r0, #1
 8002384:	e7a6      	b.n	80022d4 <_svfiprintf_r+0xd4>
 8002386:	2300      	movs	r3, #0
 8002388:	3401      	adds	r4, #1
 800238a:	9305      	str	r3, [sp, #20]
 800238c:	4619      	mov	r1, r3
 800238e:	f04f 0c0a 	mov.w	ip, #10
 8002392:	4620      	mov	r0, r4
 8002394:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002398:	3a30      	subs	r2, #48	; 0x30
 800239a:	2a09      	cmp	r2, #9
 800239c:	d903      	bls.n	80023a6 <_svfiprintf_r+0x1a6>
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0c6      	beq.n	8002330 <_svfiprintf_r+0x130>
 80023a2:	9105      	str	r1, [sp, #20]
 80023a4:	e7c4      	b.n	8002330 <_svfiprintf_r+0x130>
 80023a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80023aa:	4604      	mov	r4, r0
 80023ac:	2301      	movs	r3, #1
 80023ae:	e7f0      	b.n	8002392 <_svfiprintf_r+0x192>
 80023b0:	ab03      	add	r3, sp, #12
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	462a      	mov	r2, r5
 80023b6:	4b0f      	ldr	r3, [pc, #60]	; (80023f4 <_svfiprintf_r+0x1f4>)
 80023b8:	a904      	add	r1, sp, #16
 80023ba:	4638      	mov	r0, r7
 80023bc:	f3af 8000 	nop.w
 80023c0:	1c42      	adds	r2, r0, #1
 80023c2:	4606      	mov	r6, r0
 80023c4:	d1d6      	bne.n	8002374 <_svfiprintf_r+0x174>
 80023c6:	89ab      	ldrh	r3, [r5, #12]
 80023c8:	065b      	lsls	r3, r3, #25
 80023ca:	f53f af2d 	bmi.w	8002228 <_svfiprintf_r+0x28>
 80023ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80023d0:	b01d      	add	sp, #116	; 0x74
 80023d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023d6:	ab03      	add	r3, sp, #12
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	462a      	mov	r2, r5
 80023dc:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <_svfiprintf_r+0x1f4>)
 80023de:	a904      	add	r1, sp, #16
 80023e0:	4638      	mov	r0, r7
 80023e2:	f000 f879 	bl	80024d8 <_printf_i>
 80023e6:	e7eb      	b.n	80023c0 <_svfiprintf_r+0x1c0>
 80023e8:	0800284c 	.word	0x0800284c
 80023ec:	08002856 	.word	0x08002856
 80023f0:	00000000 	.word	0x00000000
 80023f4:	0800214d 	.word	0x0800214d
 80023f8:	08002852 	.word	0x08002852

080023fc <_printf_common>:
 80023fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002400:	4616      	mov	r6, r2
 8002402:	4699      	mov	r9, r3
 8002404:	688a      	ldr	r2, [r1, #8]
 8002406:	690b      	ldr	r3, [r1, #16]
 8002408:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800240c:	4293      	cmp	r3, r2
 800240e:	bfb8      	it	lt
 8002410:	4613      	movlt	r3, r2
 8002412:	6033      	str	r3, [r6, #0]
 8002414:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002418:	4607      	mov	r7, r0
 800241a:	460c      	mov	r4, r1
 800241c:	b10a      	cbz	r2, 8002422 <_printf_common+0x26>
 800241e:	3301      	adds	r3, #1
 8002420:	6033      	str	r3, [r6, #0]
 8002422:	6823      	ldr	r3, [r4, #0]
 8002424:	0699      	lsls	r1, r3, #26
 8002426:	bf42      	ittt	mi
 8002428:	6833      	ldrmi	r3, [r6, #0]
 800242a:	3302      	addmi	r3, #2
 800242c:	6033      	strmi	r3, [r6, #0]
 800242e:	6825      	ldr	r5, [r4, #0]
 8002430:	f015 0506 	ands.w	r5, r5, #6
 8002434:	d106      	bne.n	8002444 <_printf_common+0x48>
 8002436:	f104 0a19 	add.w	sl, r4, #25
 800243a:	68e3      	ldr	r3, [r4, #12]
 800243c:	6832      	ldr	r2, [r6, #0]
 800243e:	1a9b      	subs	r3, r3, r2
 8002440:	42ab      	cmp	r3, r5
 8002442:	dc26      	bgt.n	8002492 <_printf_common+0x96>
 8002444:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002448:	1e13      	subs	r3, r2, #0
 800244a:	6822      	ldr	r2, [r4, #0]
 800244c:	bf18      	it	ne
 800244e:	2301      	movne	r3, #1
 8002450:	0692      	lsls	r2, r2, #26
 8002452:	d42b      	bmi.n	80024ac <_printf_common+0xb0>
 8002454:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002458:	4649      	mov	r1, r9
 800245a:	4638      	mov	r0, r7
 800245c:	47c0      	blx	r8
 800245e:	3001      	adds	r0, #1
 8002460:	d01e      	beq.n	80024a0 <_printf_common+0xa4>
 8002462:	6823      	ldr	r3, [r4, #0]
 8002464:	6922      	ldr	r2, [r4, #16]
 8002466:	f003 0306 	and.w	r3, r3, #6
 800246a:	2b04      	cmp	r3, #4
 800246c:	bf02      	ittt	eq
 800246e:	68e5      	ldreq	r5, [r4, #12]
 8002470:	6833      	ldreq	r3, [r6, #0]
 8002472:	1aed      	subeq	r5, r5, r3
 8002474:	68a3      	ldr	r3, [r4, #8]
 8002476:	bf0c      	ite	eq
 8002478:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800247c:	2500      	movne	r5, #0
 800247e:	4293      	cmp	r3, r2
 8002480:	bfc4      	itt	gt
 8002482:	1a9b      	subgt	r3, r3, r2
 8002484:	18ed      	addgt	r5, r5, r3
 8002486:	2600      	movs	r6, #0
 8002488:	341a      	adds	r4, #26
 800248a:	42b5      	cmp	r5, r6
 800248c:	d11a      	bne.n	80024c4 <_printf_common+0xc8>
 800248e:	2000      	movs	r0, #0
 8002490:	e008      	b.n	80024a4 <_printf_common+0xa8>
 8002492:	2301      	movs	r3, #1
 8002494:	4652      	mov	r2, sl
 8002496:	4649      	mov	r1, r9
 8002498:	4638      	mov	r0, r7
 800249a:	47c0      	blx	r8
 800249c:	3001      	adds	r0, #1
 800249e:	d103      	bne.n	80024a8 <_printf_common+0xac>
 80024a0:	f04f 30ff 	mov.w	r0, #4294967295
 80024a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024a8:	3501      	adds	r5, #1
 80024aa:	e7c6      	b.n	800243a <_printf_common+0x3e>
 80024ac:	18e1      	adds	r1, r4, r3
 80024ae:	1c5a      	adds	r2, r3, #1
 80024b0:	2030      	movs	r0, #48	; 0x30
 80024b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80024b6:	4422      	add	r2, r4
 80024b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80024bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80024c0:	3302      	adds	r3, #2
 80024c2:	e7c7      	b.n	8002454 <_printf_common+0x58>
 80024c4:	2301      	movs	r3, #1
 80024c6:	4622      	mov	r2, r4
 80024c8:	4649      	mov	r1, r9
 80024ca:	4638      	mov	r0, r7
 80024cc:	47c0      	blx	r8
 80024ce:	3001      	adds	r0, #1
 80024d0:	d0e6      	beq.n	80024a0 <_printf_common+0xa4>
 80024d2:	3601      	adds	r6, #1
 80024d4:	e7d9      	b.n	800248a <_printf_common+0x8e>
	...

080024d8 <_printf_i>:
 80024d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80024dc:	7e0f      	ldrb	r7, [r1, #24]
 80024de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80024e0:	2f78      	cmp	r7, #120	; 0x78
 80024e2:	4691      	mov	r9, r2
 80024e4:	4680      	mov	r8, r0
 80024e6:	460c      	mov	r4, r1
 80024e8:	469a      	mov	sl, r3
 80024ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80024ee:	d807      	bhi.n	8002500 <_printf_i+0x28>
 80024f0:	2f62      	cmp	r7, #98	; 0x62
 80024f2:	d80a      	bhi.n	800250a <_printf_i+0x32>
 80024f4:	2f00      	cmp	r7, #0
 80024f6:	f000 80d4 	beq.w	80026a2 <_printf_i+0x1ca>
 80024fa:	2f58      	cmp	r7, #88	; 0x58
 80024fc:	f000 80c0 	beq.w	8002680 <_printf_i+0x1a8>
 8002500:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002504:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002508:	e03a      	b.n	8002580 <_printf_i+0xa8>
 800250a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800250e:	2b15      	cmp	r3, #21
 8002510:	d8f6      	bhi.n	8002500 <_printf_i+0x28>
 8002512:	a101      	add	r1, pc, #4	; (adr r1, 8002518 <_printf_i+0x40>)
 8002514:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002518:	08002571 	.word	0x08002571
 800251c:	08002585 	.word	0x08002585
 8002520:	08002501 	.word	0x08002501
 8002524:	08002501 	.word	0x08002501
 8002528:	08002501 	.word	0x08002501
 800252c:	08002501 	.word	0x08002501
 8002530:	08002585 	.word	0x08002585
 8002534:	08002501 	.word	0x08002501
 8002538:	08002501 	.word	0x08002501
 800253c:	08002501 	.word	0x08002501
 8002540:	08002501 	.word	0x08002501
 8002544:	08002689 	.word	0x08002689
 8002548:	080025b1 	.word	0x080025b1
 800254c:	08002643 	.word	0x08002643
 8002550:	08002501 	.word	0x08002501
 8002554:	08002501 	.word	0x08002501
 8002558:	080026ab 	.word	0x080026ab
 800255c:	08002501 	.word	0x08002501
 8002560:	080025b1 	.word	0x080025b1
 8002564:	08002501 	.word	0x08002501
 8002568:	08002501 	.word	0x08002501
 800256c:	0800264b 	.word	0x0800264b
 8002570:	682b      	ldr	r3, [r5, #0]
 8002572:	1d1a      	adds	r2, r3, #4
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	602a      	str	r2, [r5, #0]
 8002578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800257c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002580:	2301      	movs	r3, #1
 8002582:	e09f      	b.n	80026c4 <_printf_i+0x1ec>
 8002584:	6820      	ldr	r0, [r4, #0]
 8002586:	682b      	ldr	r3, [r5, #0]
 8002588:	0607      	lsls	r7, r0, #24
 800258a:	f103 0104 	add.w	r1, r3, #4
 800258e:	6029      	str	r1, [r5, #0]
 8002590:	d501      	bpl.n	8002596 <_printf_i+0xbe>
 8002592:	681e      	ldr	r6, [r3, #0]
 8002594:	e003      	b.n	800259e <_printf_i+0xc6>
 8002596:	0646      	lsls	r6, r0, #25
 8002598:	d5fb      	bpl.n	8002592 <_printf_i+0xba>
 800259a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800259e:	2e00      	cmp	r6, #0
 80025a0:	da03      	bge.n	80025aa <_printf_i+0xd2>
 80025a2:	232d      	movs	r3, #45	; 0x2d
 80025a4:	4276      	negs	r6, r6
 80025a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80025aa:	485a      	ldr	r0, [pc, #360]	; (8002714 <_printf_i+0x23c>)
 80025ac:	230a      	movs	r3, #10
 80025ae:	e012      	b.n	80025d6 <_printf_i+0xfe>
 80025b0:	682b      	ldr	r3, [r5, #0]
 80025b2:	6820      	ldr	r0, [r4, #0]
 80025b4:	1d19      	adds	r1, r3, #4
 80025b6:	6029      	str	r1, [r5, #0]
 80025b8:	0605      	lsls	r5, r0, #24
 80025ba:	d501      	bpl.n	80025c0 <_printf_i+0xe8>
 80025bc:	681e      	ldr	r6, [r3, #0]
 80025be:	e002      	b.n	80025c6 <_printf_i+0xee>
 80025c0:	0641      	lsls	r1, r0, #25
 80025c2:	d5fb      	bpl.n	80025bc <_printf_i+0xe4>
 80025c4:	881e      	ldrh	r6, [r3, #0]
 80025c6:	4853      	ldr	r0, [pc, #332]	; (8002714 <_printf_i+0x23c>)
 80025c8:	2f6f      	cmp	r7, #111	; 0x6f
 80025ca:	bf0c      	ite	eq
 80025cc:	2308      	moveq	r3, #8
 80025ce:	230a      	movne	r3, #10
 80025d0:	2100      	movs	r1, #0
 80025d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80025d6:	6865      	ldr	r5, [r4, #4]
 80025d8:	60a5      	str	r5, [r4, #8]
 80025da:	2d00      	cmp	r5, #0
 80025dc:	bfa2      	ittt	ge
 80025de:	6821      	ldrge	r1, [r4, #0]
 80025e0:	f021 0104 	bicge.w	r1, r1, #4
 80025e4:	6021      	strge	r1, [r4, #0]
 80025e6:	b90e      	cbnz	r6, 80025ec <_printf_i+0x114>
 80025e8:	2d00      	cmp	r5, #0
 80025ea:	d04b      	beq.n	8002684 <_printf_i+0x1ac>
 80025ec:	4615      	mov	r5, r2
 80025ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80025f2:	fb03 6711 	mls	r7, r3, r1, r6
 80025f6:	5dc7      	ldrb	r7, [r0, r7]
 80025f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80025fc:	4637      	mov	r7, r6
 80025fe:	42bb      	cmp	r3, r7
 8002600:	460e      	mov	r6, r1
 8002602:	d9f4      	bls.n	80025ee <_printf_i+0x116>
 8002604:	2b08      	cmp	r3, #8
 8002606:	d10b      	bne.n	8002620 <_printf_i+0x148>
 8002608:	6823      	ldr	r3, [r4, #0]
 800260a:	07de      	lsls	r6, r3, #31
 800260c:	d508      	bpl.n	8002620 <_printf_i+0x148>
 800260e:	6923      	ldr	r3, [r4, #16]
 8002610:	6861      	ldr	r1, [r4, #4]
 8002612:	4299      	cmp	r1, r3
 8002614:	bfde      	ittt	le
 8002616:	2330      	movle	r3, #48	; 0x30
 8002618:	f805 3c01 	strble.w	r3, [r5, #-1]
 800261c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002620:	1b52      	subs	r2, r2, r5
 8002622:	6122      	str	r2, [r4, #16]
 8002624:	f8cd a000 	str.w	sl, [sp]
 8002628:	464b      	mov	r3, r9
 800262a:	aa03      	add	r2, sp, #12
 800262c:	4621      	mov	r1, r4
 800262e:	4640      	mov	r0, r8
 8002630:	f7ff fee4 	bl	80023fc <_printf_common>
 8002634:	3001      	adds	r0, #1
 8002636:	d14a      	bne.n	80026ce <_printf_i+0x1f6>
 8002638:	f04f 30ff 	mov.w	r0, #4294967295
 800263c:	b004      	add	sp, #16
 800263e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002642:	6823      	ldr	r3, [r4, #0]
 8002644:	f043 0320 	orr.w	r3, r3, #32
 8002648:	6023      	str	r3, [r4, #0]
 800264a:	4833      	ldr	r0, [pc, #204]	; (8002718 <_printf_i+0x240>)
 800264c:	2778      	movs	r7, #120	; 0x78
 800264e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002652:	6823      	ldr	r3, [r4, #0]
 8002654:	6829      	ldr	r1, [r5, #0]
 8002656:	061f      	lsls	r7, r3, #24
 8002658:	f851 6b04 	ldr.w	r6, [r1], #4
 800265c:	d402      	bmi.n	8002664 <_printf_i+0x18c>
 800265e:	065f      	lsls	r7, r3, #25
 8002660:	bf48      	it	mi
 8002662:	b2b6      	uxthmi	r6, r6
 8002664:	07df      	lsls	r7, r3, #31
 8002666:	bf48      	it	mi
 8002668:	f043 0320 	orrmi.w	r3, r3, #32
 800266c:	6029      	str	r1, [r5, #0]
 800266e:	bf48      	it	mi
 8002670:	6023      	strmi	r3, [r4, #0]
 8002672:	b91e      	cbnz	r6, 800267c <_printf_i+0x1a4>
 8002674:	6823      	ldr	r3, [r4, #0]
 8002676:	f023 0320 	bic.w	r3, r3, #32
 800267a:	6023      	str	r3, [r4, #0]
 800267c:	2310      	movs	r3, #16
 800267e:	e7a7      	b.n	80025d0 <_printf_i+0xf8>
 8002680:	4824      	ldr	r0, [pc, #144]	; (8002714 <_printf_i+0x23c>)
 8002682:	e7e4      	b.n	800264e <_printf_i+0x176>
 8002684:	4615      	mov	r5, r2
 8002686:	e7bd      	b.n	8002604 <_printf_i+0x12c>
 8002688:	682b      	ldr	r3, [r5, #0]
 800268a:	6826      	ldr	r6, [r4, #0]
 800268c:	6961      	ldr	r1, [r4, #20]
 800268e:	1d18      	adds	r0, r3, #4
 8002690:	6028      	str	r0, [r5, #0]
 8002692:	0635      	lsls	r5, r6, #24
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	d501      	bpl.n	800269c <_printf_i+0x1c4>
 8002698:	6019      	str	r1, [r3, #0]
 800269a:	e002      	b.n	80026a2 <_printf_i+0x1ca>
 800269c:	0670      	lsls	r0, r6, #25
 800269e:	d5fb      	bpl.n	8002698 <_printf_i+0x1c0>
 80026a0:	8019      	strh	r1, [r3, #0]
 80026a2:	2300      	movs	r3, #0
 80026a4:	6123      	str	r3, [r4, #16]
 80026a6:	4615      	mov	r5, r2
 80026a8:	e7bc      	b.n	8002624 <_printf_i+0x14c>
 80026aa:	682b      	ldr	r3, [r5, #0]
 80026ac:	1d1a      	adds	r2, r3, #4
 80026ae:	602a      	str	r2, [r5, #0]
 80026b0:	681d      	ldr	r5, [r3, #0]
 80026b2:	6862      	ldr	r2, [r4, #4]
 80026b4:	2100      	movs	r1, #0
 80026b6:	4628      	mov	r0, r5
 80026b8:	f7fd fd9a 	bl	80001f0 <memchr>
 80026bc:	b108      	cbz	r0, 80026c2 <_printf_i+0x1ea>
 80026be:	1b40      	subs	r0, r0, r5
 80026c0:	6060      	str	r0, [r4, #4]
 80026c2:	6863      	ldr	r3, [r4, #4]
 80026c4:	6123      	str	r3, [r4, #16]
 80026c6:	2300      	movs	r3, #0
 80026c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026cc:	e7aa      	b.n	8002624 <_printf_i+0x14c>
 80026ce:	6923      	ldr	r3, [r4, #16]
 80026d0:	462a      	mov	r2, r5
 80026d2:	4649      	mov	r1, r9
 80026d4:	4640      	mov	r0, r8
 80026d6:	47d0      	blx	sl
 80026d8:	3001      	adds	r0, #1
 80026da:	d0ad      	beq.n	8002638 <_printf_i+0x160>
 80026dc:	6823      	ldr	r3, [r4, #0]
 80026de:	079b      	lsls	r3, r3, #30
 80026e0:	d413      	bmi.n	800270a <_printf_i+0x232>
 80026e2:	68e0      	ldr	r0, [r4, #12]
 80026e4:	9b03      	ldr	r3, [sp, #12]
 80026e6:	4298      	cmp	r0, r3
 80026e8:	bfb8      	it	lt
 80026ea:	4618      	movlt	r0, r3
 80026ec:	e7a6      	b.n	800263c <_printf_i+0x164>
 80026ee:	2301      	movs	r3, #1
 80026f0:	4632      	mov	r2, r6
 80026f2:	4649      	mov	r1, r9
 80026f4:	4640      	mov	r0, r8
 80026f6:	47d0      	blx	sl
 80026f8:	3001      	adds	r0, #1
 80026fa:	d09d      	beq.n	8002638 <_printf_i+0x160>
 80026fc:	3501      	adds	r5, #1
 80026fe:	68e3      	ldr	r3, [r4, #12]
 8002700:	9903      	ldr	r1, [sp, #12]
 8002702:	1a5b      	subs	r3, r3, r1
 8002704:	42ab      	cmp	r3, r5
 8002706:	dcf2      	bgt.n	80026ee <_printf_i+0x216>
 8002708:	e7eb      	b.n	80026e2 <_printf_i+0x20a>
 800270a:	2500      	movs	r5, #0
 800270c:	f104 0619 	add.w	r6, r4, #25
 8002710:	e7f5      	b.n	80026fe <_printf_i+0x226>
 8002712:	bf00      	nop
 8002714:	0800285d 	.word	0x0800285d
 8002718:	0800286e 	.word	0x0800286e

0800271c <memmove>:
 800271c:	4288      	cmp	r0, r1
 800271e:	b510      	push	{r4, lr}
 8002720:	eb01 0402 	add.w	r4, r1, r2
 8002724:	d902      	bls.n	800272c <memmove+0x10>
 8002726:	4284      	cmp	r4, r0
 8002728:	4623      	mov	r3, r4
 800272a:	d807      	bhi.n	800273c <memmove+0x20>
 800272c:	1e43      	subs	r3, r0, #1
 800272e:	42a1      	cmp	r1, r4
 8002730:	d008      	beq.n	8002744 <memmove+0x28>
 8002732:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002736:	f803 2f01 	strb.w	r2, [r3, #1]!
 800273a:	e7f8      	b.n	800272e <memmove+0x12>
 800273c:	4402      	add	r2, r0
 800273e:	4601      	mov	r1, r0
 8002740:	428a      	cmp	r2, r1
 8002742:	d100      	bne.n	8002746 <memmove+0x2a>
 8002744:	bd10      	pop	{r4, pc}
 8002746:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800274a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800274e:	e7f7      	b.n	8002740 <memmove+0x24>

08002750 <_sbrk_r>:
 8002750:	b538      	push	{r3, r4, r5, lr}
 8002752:	4d06      	ldr	r5, [pc, #24]	; (800276c <_sbrk_r+0x1c>)
 8002754:	2300      	movs	r3, #0
 8002756:	4604      	mov	r4, r0
 8002758:	4608      	mov	r0, r1
 800275a:	602b      	str	r3, [r5, #0]
 800275c:	f7fe fada 	bl	8000d14 <_sbrk>
 8002760:	1c43      	adds	r3, r0, #1
 8002762:	d102      	bne.n	800276a <_sbrk_r+0x1a>
 8002764:	682b      	ldr	r3, [r5, #0]
 8002766:	b103      	cbz	r3, 800276a <_sbrk_r+0x1a>
 8002768:	6023      	str	r3, [r4, #0]
 800276a:	bd38      	pop	{r3, r4, r5, pc}
 800276c:	200002a0 	.word	0x200002a0

08002770 <memcpy>:
 8002770:	440a      	add	r2, r1
 8002772:	4291      	cmp	r1, r2
 8002774:	f100 33ff 	add.w	r3, r0, #4294967295
 8002778:	d100      	bne.n	800277c <memcpy+0xc>
 800277a:	4770      	bx	lr
 800277c:	b510      	push	{r4, lr}
 800277e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002782:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002786:	4291      	cmp	r1, r2
 8002788:	d1f9      	bne.n	800277e <memcpy+0xe>
 800278a:	bd10      	pop	{r4, pc}

0800278c <_realloc_r>:
 800278c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002790:	4680      	mov	r8, r0
 8002792:	4614      	mov	r4, r2
 8002794:	460e      	mov	r6, r1
 8002796:	b921      	cbnz	r1, 80027a2 <_realloc_r+0x16>
 8002798:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800279c:	4611      	mov	r1, r2
 800279e:	f7ff bc49 	b.w	8002034 <_malloc_r>
 80027a2:	b92a      	cbnz	r2, 80027b0 <_realloc_r+0x24>
 80027a4:	f7ff fbda 	bl	8001f5c <_free_r>
 80027a8:	4625      	mov	r5, r4
 80027aa:	4628      	mov	r0, r5
 80027ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027b0:	f000 f81b 	bl	80027ea <_malloc_usable_size_r>
 80027b4:	4284      	cmp	r4, r0
 80027b6:	4607      	mov	r7, r0
 80027b8:	d802      	bhi.n	80027c0 <_realloc_r+0x34>
 80027ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80027be:	d812      	bhi.n	80027e6 <_realloc_r+0x5a>
 80027c0:	4621      	mov	r1, r4
 80027c2:	4640      	mov	r0, r8
 80027c4:	f7ff fc36 	bl	8002034 <_malloc_r>
 80027c8:	4605      	mov	r5, r0
 80027ca:	2800      	cmp	r0, #0
 80027cc:	d0ed      	beq.n	80027aa <_realloc_r+0x1e>
 80027ce:	42bc      	cmp	r4, r7
 80027d0:	4622      	mov	r2, r4
 80027d2:	4631      	mov	r1, r6
 80027d4:	bf28      	it	cs
 80027d6:	463a      	movcs	r2, r7
 80027d8:	f7ff ffca 	bl	8002770 <memcpy>
 80027dc:	4631      	mov	r1, r6
 80027de:	4640      	mov	r0, r8
 80027e0:	f7ff fbbc 	bl	8001f5c <_free_r>
 80027e4:	e7e1      	b.n	80027aa <_realloc_r+0x1e>
 80027e6:	4635      	mov	r5, r6
 80027e8:	e7df      	b.n	80027aa <_realloc_r+0x1e>

080027ea <_malloc_usable_size_r>:
 80027ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027ee:	1f18      	subs	r0, r3, #4
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	bfbc      	itt	lt
 80027f4:	580b      	ldrlt	r3, [r1, r0]
 80027f6:	18c0      	addlt	r0, r0, r3
 80027f8:	4770      	bx	lr
	...

080027fc <_init>:
 80027fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027fe:	bf00      	nop
 8002800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002802:	bc08      	pop	{r3}
 8002804:	469e      	mov	lr, r3
 8002806:	4770      	bx	lr

08002808 <_fini>:
 8002808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800280a:	bf00      	nop
 800280c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800280e:	bc08      	pop	{r3}
 8002810:	469e      	mov	lr, r3
 8002812:	4770      	bx	lr
